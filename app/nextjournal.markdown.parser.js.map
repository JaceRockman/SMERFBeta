{"version":3,"sources":["nextjournal/markdown/parser.cljc"],"mappings":"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","names":["nextjournal.markdown.parser/get-in*","applied-science.js-interop/get-in","nextjournal.markdown.parser/update*","applied-science.js-interop/update!","nextjournal.markdown.parser/re-idx-seq","re","text","rex","js/RegExp","cljs.core.take_while","cljs.core/some?","cljs.core.repeatedly","temp__5808__auto__","m","cljs.core/vec","nextjournal.markdown.parser/inc-last","path","cljs.core.update","cljs.core/count","cljs.core/inc","p__37828","map__37829","cljs.core/--destructure-map","cljs.core.get","nextjournal.markdown.parser/hlevel","_token","hn","G__37833","cljs.core/re-matches","cljs.core/second","js/parseInt","nextjournal.markdown.parser/->slug","cljs.core.apply","cljs.core/str","cljs.core.map","cljs.core.comp","clojure.string/lower-case","c","G__37844","nextjournal.markdown.parser/parse-fence-info","info-str","e37867","tokens","clojure.string/trim","clojure.string/replace","clojure.string.split","cljs.core.reduce","p__37870","map__37871","info-map","language","token","vec__37872","cljs.core.nth","_","k","v","clojure.string/starts-with?","cljs.core.assoc","and__5043__auto__","cljs.core.keyword","cljs.core/not","nextjournal.markdown.parser/text-node","nextjournal.markdown.parser/tag-node","nextjournal.markdown.parser/formula","nextjournal.markdown.parser/block-formula","nextjournal.markdown.parser/sidenote-ref","ref","nextjournal.markdown.parser/node","type","content","attrs","top-level","G__37879","cljs.core/seq","cljs.core.merge","p__37880","map__37881","nextjournal.markdown.parser/empty-text-node?","t","cljs.core._EQ_","cljs.core/empty?","p__37887","map__37888","nextjournal.markdown.parser/push-node","doc","node","e37889","G__37890","cljs.core.update_in","cljs.core/pop","cljs.core/conj","js/Error","e","cljs.core.ex_info","nextjournal.markdown.parser/push-nodes","cljs.core.partial","cljs.core/reduce","var_args","G__37900","nextjournal.markdown.parser/open-node","nextjournal.markdown.parser.open_node","cljs.core/into","nextjournal.markdown.parser/ppop","nextjournal.markdown.parser/close-node","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","nextjournal.markdown.parser/update-current","p__37911","map__37912","seq37904","G__37905","cljs.core/first","cljs.core/next","G__37906","self__5754__auto__","fn","args","cljs.core/update-in","p__37913","map__37914","nextjournal.markdown.parser/update-node-id","id->index","slug-fn","id","cljs.core/ifn?","G__37915","cljs.core.get_in","id-count","G__37916","cljs.core/assoc-in","cljs.core.conj","G__37917","cljs.core.fnil","p__37918","map__37919","nextjournal.markdown.parser/into-toc","toc","toc-item","heading-level","l","toc-path","type-path","x__5130__auto__","y__5131__auto__","p__37928","map__37929","nextjournal.markdown.parser/add-to-toc","h","G__37930","cljs.core/pos-int?","p__37939","map__37940","nextjournal.markdown.parser/set-title-when-missing","title","heading","G__37941","nextjournal.markdown.transform/->text","p__37942","map__37943","nextjournal.markdown.parser/add-title+toc","rf","xf","cljs.core.filter","js/nextjournal","js/nextjournal.markdown","js/nextjournal.markdown.parser","js/nextjournal.markdown.parser.apply-token","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__37949","cljs.core/MultiFn","cljs.core.symbol","nextjournal.markdown.parser/apply-token","_doc","cljs.core.prn","p__37955","map__37956","doc-level","map__37957","doc'","G__37965","p__37968","map__37969","hidden","p__37976","map__37977","map__37978","has-todos","p__37980","map__37981","p__37986","map__37987","map__37988","todo","p__37989","map__37990","nextjournal.markdown.parser.update_current","cljs.core/dissoc","p__37998","map__38002","p__38004","map__38005","i","G__38009","G__38010","G__38011","G__38012","G__38014","G__38015","nextjournal.markdown.parser/text-tokenizers","match","cljs.core.subs","p__38039","map__38041","nextjournal.markdown.parser/normalize-tokenizer","tokenizer","doc-handler","handler","regex","tokenizer-fn","or__5045__auto__","G__38047","p__38051","map__38052","p__38053","p__38054","map__38055","map__38056","nextjournal.markdown.parser/tokenize-text-node","tkz","cljs.core/fn?","idx-seq","map__38057","text-hnode","s","nodes","remaining-text","p__38058","p__38059","map__38060","vec__38061","acc","start","end","cljs.core/subs","G__38065","cljs.core/reverse","G__38069","p__38074","p__38075","map__38076","map__38077","text-tokenizers","p__38078","map__38079","G__38080","G__38081","cljs.core.dissoc","cljs.core.mapcat","p__38082","map__38083","p__38086","map__38087","ts","nextjournal.markdown.parser/apply-tokens","p__38088","map__38089","p__38091","map__38092","p__38093","map__38094","children","G__38095","G__38096","p__38110","map__38111","nextjournal.markdown.parser/pairs->kmap","pairs","cljs.core.into","cljs.core.juxt","cljs.core/keyword","mapify-attrs-xf","x","nextjournal.markdown.parser/empty-doc","G__38126","nextjournal.markdown.parser/parse","nextjournal.markdown.parser.parse","cljs.core/map","p__38133","p__38134","map__38135","vec__38136","nextjournal.markdown.parser/section-at","pos","map__38142","section-level","in-section?","p__38143","map__38144","cljs.core/cons","cljs.core.drop"],"sourcesContent":[";; # \ud83e\udde9 Parsing\n;;\n;; Deals with transforming a sequence of tokens obtained by [markdown-it] into a nested AST composed of nested _nodes_.\n;;\n;; A _node_ is a clojure map and has no closed specification at the moment. We do follow a few conventions for its keys:\n;;\n;; - `:type` a keyword (:heading, :paragraph, :text, :code etc.) present on all nodes.\n;;\n;; When a node contains other child nodes, then it will have a\n;;\n;; - `:content` a collection of nodes representing nested content\n;;\n;; when a node is a textual leaf (as in a `:text` or `:formula` nodes) it carries a\n;; - `:text` key with a string value\n;;\n;; Other keys might include e.g.\n;;\n;; - `:info` specific of fenced code blocks\n;; - `:heading-level` specific of `:heading` nodes\n;; - `:attrs` attributes as passed by markdown-it tokens (e.g `{:style \"some style info\"}`)\n(ns nextjournal.markdown.parser\n  (:require [clojure.string :as str]\n            [nextjournal.markdown.transform :as md.transform]\n            #?@(:cljs [[applied-science.js-interop :as j]\n                       [cljs.reader :as reader]])))\n\n;; clj common accessors\n(def get-in* #?(:clj get-in :cljs j/get-in))\n(def update* #?(:clj update :cljs j/update!))\n\n#?(:clj (defn re-groups* [m] (let [g (re-groups m)] (cond-> g (not (vector? g)) vector))))\n(defn re-idx-seq\n  \"Takes a regex and a string, returns a seq of triplets comprised of match groups followed by indices delimiting each match.\"\n  [re text]\n  #?(:clj (let [m (re-matcher re text)]\n            (take-while some? (repeatedly #(when (.find m) [(re-groups* m) (.start m) (.end m)]))))\n     :cljs (let [rex (js/RegExp. (.-source re) \"g\")]\n             (take-while some? (repeatedly #(when-some [m (.exec rex text)] [(vec m) (.-index m) (.-lastIndex rex)]))))))\n\n\n(comment (re-idx-seq #\"\\{\\{([^{]+)\\}\\}\" \"foo {{hello}} bar\"))\n(comment (re-idx-seq #\"\\{\\{[^{]+\\}\\}\" \"foo {{hello}} bar\"))\n;; region node operations\n;; helpers\n(defn inc-last [path] (update path (dec (count path)) inc))\n(defn hlevel [{:as _token hn :tag}] (when (string? hn) (some-> (re-matches #\"h([\\d])\" hn) second #?(:clj Integer/parseInt :cljs js/parseInt))))\n(defn ->slug [text]\n  (apply str\n         (map (comp str/lower-case (fn [c] (case c (\\space \\_) \\- c)))\n              text)))\n\n#_(->slug \"Hello There\")\n#_(->slug \"Hello_There\")\n\n;; `parse-fence-info` ingests nextjournal, GFM, Pandoc and RMarkdown fenced code block info (any text following the leading 3 backticks) and returns a map\n;;\n;; _nextjournal_ / _GFM_\n;;\n;;    ```python id=2e3541da-0735-4b7f-a12f-4fb1bfcb6138\n;;    python code\n;;    ```\n;;\n;; _Pandoc_\n;;\n;;    ```{#pandoc-id .languge .extra-class key=Val}\n;;    code in language\n;;    ```\n;;\n;; _Rmd_\n;;\n;;    ```{r cars, echo=FALSE}\n;;    R code\n;;    ```\n;;\n;; See also:\n;; - https://github.github.com/gfm/#info-string\n;; - https://pandoc.org/MANUAL.html#fenced-code-blocks\n;; - https://rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf\"\n\n(defn parse-fence-info [info-str]\n  (try\n    (when (string? info-str)\n      (let [tokens (-> info-str\n                       str/trim\n                       (str/replace #\"[\\{\\}\\,]\" \"\")         ;; remove Pandoc/Rmarkdown brackets and commas\n                       (str/replace \".\" \"\")                 ;; remove dots\n                       (str/split #\" \"))]                   ;; split by spaces\n        (reduce\n         (fn [{:as info-map :keys [language]} token]\n           (let [[_ k v] (re-matches #\"^([^=]+)=([^=]+)$\" token)]\n             (cond\n               (str/starts-with? token \"#\") (assoc info-map :id (str/replace token #\"^#\" \"\")) ;; pandoc #id\n               (and k v) (assoc info-map (keyword k) v)\n               (not language) (assoc info-map :language token) ;; language is the first simple token which is not a pandoc's id\n               :else (assoc info-map (keyword token) true))))\n         {}\n         tokens)))\n    (catch #?(:clj Throwable :cljs :default) _ {})))\n\n(comment\n  (parse-fence-info \"python runtime-id=5f77e475-6178-47a3-8437-45c9c34d57ff\")\n  (parse-fence-info \"{#some-id .lang foo=nex}\")\n  (parse-fence-info \"#id clojure\")\n  (parse-fence-info \"clojure #id\")\n  (parse-fence-info \"clojure\")\n  (parse-fence-info \"{r cars, echo=FALSE}\"))\n\n;; leaf nodes\n(defn text-node [text] {:type :text :text text})\n(defn tag-node [text] {:type :hashtag :text text})\n(defn formula [text] {:type :formula :text text})\n(defn block-formula [text] {:type :block-formula :text text})\n(defn sidenote-ref [ref] {:type :sidenote-ref :content [(text-node (str (inc ref)))]})\n\n;; node constructors\n(defn node\n  [type content attrs top-level]\n  (cond-> {:type type :content content}\n    (seq attrs) (assoc :attrs attrs)\n    (seq top-level) (merge top-level)))\n\n(defn empty-text-node? [{text :text t :type}] (and (= :text t) (empty? text)))\n\n(defn push-node [{:as doc ::keys [path]} node]\n  (try\n    (cond-> doc\n      ;; \u2b07 mdit produces empty text tokens at mark boundaries, see edge cases below\n      (not (empty-text-node? node))\n      (-> #_doc\n       (update ::path inc-last)\n       (update-in (pop path) conj node)))\n    (catch #?(:clj Exception :cljs js/Error) e\n      (throw (ex-info (str \"nextjournal.markdown cannot add node: \" node \" at path: \" path)\n                      {:doc doc :node node} e)))))\n\n(def push-nodes (partial reduce push-node))\n\n(defn open-node\n  ([doc type] (open-node doc type {}))\n  ([doc type attrs] (open-node doc type attrs {}))\n  ([doc type attrs top-level]\n   (-> doc\n       (push-node (node type [] attrs top-level))\n       (update ::path into [:content -1]))))\n;; after closing a node, document ::path will point at it\n(def ppop (comp pop pop))\n(defn close-node [doc] (update doc ::path ppop))\n(defn update-current [{:as doc path ::path} fn & args] (apply update-in doc path fn args))\n\n(defn update-node-id [{:as doc ::keys [id->index path] :keys [slug-fn]}]\n  (let [id (when (ifn? slug-fn) (-> doc (get-in path) slug-fn))\n        id-count (when id (get id->index id))]\n    (cond-> doc\n      id\n      (-> (assoc-in (conj path :attrs :id) (cond-> id id-count (str \"-\" (inc id-count))))\n          (update-in [::id->index id] (fnil inc 0))))))\n\n(comment                                                    ;; path after call\n  (-> empty-doc                                             ;; [:content -1]\n      (open-node :heading)                                  ;; [:content 0 :content -1]\n      (push-node {:node/type :text :text \"foo\"})            ;; [:content 0 :content 0]\n      (push-node {:node/type :text :text \"foo\"})            ;; [:content 0 :content 1]\n      close-node                                            ;; [:content 1]\n\n      (open-node :paragraph)                                ;; [:content 1 :content]\n      (push-node {:node/type :text :text \"hello\"})\n      close-node\n      (open-node :bullet-list)\n      ;;\n      ))\n;; endregion\n\n;; region TOC builder:\n;; toc nodes are heading nodes but with `:type` `:toc` and an extra branching along\n;; the key `:children` representing the sub-sections of the node\n(defn into-toc [toc {:as toc-item :keys [heading-level]}]\n  (loop [toc toc l heading-level toc-path [:children]]\n    ;; `toc-path` is `[:children i\u2081 :children i\u2082 ... :children]`\n    (let [type-path (assoc toc-path (dec (count toc-path)) :type)]\n      (cond\n        ;; insert intermediate default empty :content collections for the final update-in (which defaults to maps otherwise)\n        (not (get-in toc toc-path))\n        (recur (assoc-in toc toc-path []) l toc-path)\n\n        ;; fill in toc types for non-contiguous jumps like h1 -> h3\n        (not (get-in toc type-path))\n        (recur (assoc-in toc type-path :toc) l toc-path)\n\n        (= 1 l)\n        (update-in toc toc-path (fnil conj []) toc-item)\n\n        :else\n        (recur toc\n               (dec l)\n               (conj toc-path\n                     (max 0 (dec (count (get-in toc toc-path)))) ;; select last child at level if it exists\n                     :children))))))\n\n(defn add-to-toc [doc {:as h :keys [heading-level]}]\n  (cond-> doc (pos-int? heading-level) (update :toc into-toc (assoc h :type :toc))))\n\n(defn set-title-when-missing [{:as doc :keys [title]} heading]\n  (cond-> doc (nil? title) (assoc :title (md.transform/->text heading))))\n\n(defn add-title+toc\n  \"Computes and adds a :title and a :toc to the document-like structure `doc` which might have not been constructed by means of `parse`.\"\n  [{:as doc :keys [content]}]\n  (let [rf (fn [doc heading] (-> doc (add-to-toc heading) (set-title-when-missing heading)))\n        xf (filter (comp #{:heading} :type))]\n    (reduce (xf rf) (assoc doc :toc {:type :toc}) content)))\n\n(comment\n (-> {:type :toc}\n     ;;(into-toc {:heading-level 3 :title \"Foo\"})\n     ;;(into-toc {:heading-level 2 :title \"Section 1\"})\n     (into-toc {:heading-level 1 :title \"Title\" :type :toc})\n     (into-toc {:heading-level 4 :title \"Section 2\" :type :toc})\n     ;;(into-toc {:heading-level 4 :title \"Section 2.1\"})\n     ;;(into-toc {:heading-level 2 :title \"Section 3\"})\n     )\n\n (-> \"# Top _Title_\n\npar\n\n### Three\n\n## Two\n\npar\n- and a nested\n- ### Heading not included\n\nfoo\n\n## Two Again\n\npar\n\n# One Again\n\n[[TOC]]\n\n#### Four\n\nend\"\n     nextjournal.markdown/parse\n     :toc\n     ))\n;; endregion\n\n;; region token handlers\n(declare apply-tokens)\n(defmulti apply-token (fn [_doc token] (:type token)))\n(defmethod apply-token :default [doc token]\n  (prn :apply-token/unknown-type {:token token})\n  doc)\n\n;; blocks\n(defmethod apply-token \"heading_open\" [doc token] (open-node doc :heading {} {:heading-level (hlevel token)}))\n(defmethod apply-token \"heading_close\" [doc {doc-level :level}]\n  (let [{:as doc ::keys [path]} (close-node doc)\n        doc' (update-node-id doc)\n        heading (-> doc' (get-in path) (assoc :path path))]\n    (cond-> doc'\n      (zero? doc-level)\n      (-> (add-to-toc heading)\n          (set-title-when-missing heading)))))\n\n;; for building the TOC we just care about headings at document top level (not e.g. nested under lists) \u2b06\n\n(defmethod apply-token \"paragraph_open\" [doc {:as _token :keys [hidden]}] (open-node doc (if hidden :plain :paragraph)))\n(defmethod apply-token \"paragraph_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"bullet_list_open\" [doc {{:as attrs :keys [has-todos]} :attrs}] (open-node doc (if has-todos :todo-list :bullet-list) attrs))\n(defmethod apply-token \"bullet_list_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"ordered_list_open\" [doc {:keys [attrs]}] (open-node doc :numbered-list attrs))\n(defmethod apply-token \"ordered_list_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"list_item_open\" [doc {{:as attrs :keys [todo]} :attrs}] (open-node doc (if todo :todo-item :list-item) attrs))\n(defmethod apply-token \"list_item_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"math_block\" [doc {text :content}] (push-node doc (block-formula text)))\n(defmethod apply-token \"math_block_end\" [doc _token] doc)\n\n(defmethod apply-token \"hr\" [doc _token] (push-node doc {:type :ruler}))\n\n(defmethod apply-token \"blockquote_open\" [doc _token] (open-node doc :blockquote))\n(defmethod apply-token \"blockquote_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"tocOpen\" [doc _token] (open-node doc :toc))\n(defmethod apply-token \"tocBody\" [doc _token] doc) ;; ignore body\n(defmethod apply-token \"tocClose\" [doc _token] (-> doc close-node (update-current dissoc :content)))\n\n(defmethod apply-token \"code_block\" [doc {:as _token c :content}]\n  (-> doc\n      (open-node :code)\n      (push-node (text-node c))\n      close-node))\n(defmethod apply-token \"fence\" [doc {:as _token i :info c :content}]\n  (-> doc\n      (open-node :code {} (assoc (parse-fence-info i) :info i))\n      (push-node (text-node c))\n      close-node))\n\n;; footnotes\n(defmethod apply-token \"sidenote_ref\" [doc token] (push-node doc (sidenote-ref (get-in* token [:meta :id]))))\n(defmethod apply-token \"sidenote_anchor\" [doc token] doc)\n(defmethod apply-token \"sidenote_open\" [doc token] (-> doc (assoc :sidenotes? true) (open-node :sidenote {:ref (get-in* token [:meta :id])})))\n(defmethod apply-token \"sidenote_close\" [doc token] (close-node doc))\n(defmethod apply-token \"sidenote_block_open\" [doc token] (-> doc (assoc :sidenotes? true) (open-node :sidenote {:ref (get-in* token [:meta :id])})))\n(defmethod apply-token \"sidenote_block_close\" [doc token] (close-node doc))\n\n;; tables\n;; table data tokens might have {:style \"text-align:right|left\"} attrs, maybe better nested node > :attrs > :style ?\n(defmethod apply-token \"table_open\" [doc _token] (open-node doc :table))\n(defmethod apply-token \"table_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"thead_open\" [doc _token] (open-node doc :table-head))\n(defmethod apply-token \"thead_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"tr_open\" [doc _token] (open-node doc :table-row))\n(defmethod apply-token \"tr_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"th_open\" [doc token] (open-node doc :table-header (:attrs token)))\n(defmethod apply-token \"th_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"tbody_open\" [doc _token] (open-node doc :table-body))\n(defmethod apply-token \"tbody_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"td_open\" [doc token] (open-node doc :table-data (:attrs token)))\n(defmethod apply-token \"td_close\" [doc _token] (close-node doc))\n\n(comment\n  (->\n\"\n| Syntax |  JVM                     | JavaScript                      |\n|--------|:------------------------:|--------------------------------:|\n|   foo  |  Loca _lDate_ ahoiii     | goog.date.Date                  |\n|   bar  |  java.time.LocalTime     | some [kinky](link/to/something) |\n|   bag  |  java.time.LocalDateTime | $\\\\phi$                         |\n\"\n    nextjournal.markdown/parse\n    nextjournal.markdown.transform/->hiccup\n    ))\n\n;; ## Handling of Text Tokens\n;;\n;;    normalize-tokenizer :: {:regex, :doc-handler} | {:tokenizer-fn, :handler} -> Tokenizer\n;;    Tokenizer :: {:tokenizer-fn :: TokenizerFn, :doc-handler :: DocHandler}\n;;\n;;    Match :: Any\n;;    Handler :: Match -> Node\n;;    IndexedMatch :: (Match, Int, Int)\n;;    TokenizerFn :: String -> [IndexedMatch]\n;;    DocHandler :: Doc -> {:match :: Match} -> Doc\n\n(def text-tokenizers\n  [{:regex #\"(^|\\B)#[\\w-]+\"\n    :handler (fn [match] {:type :hashtag :text (subs (match 0) 1)})}\n   {:regex #\"\\[\\[([^\\]]+)\\]\\]\"\n    :handler (fn [match] {:type :internal-link :text (match 1)})}])\n\n(defn normalize-tokenizer\n  \"Normalizes a map of regex and handler into a Tokenizer\"\n  [{:as tokenizer :keys [doc-handler handler regex tokenizer-fn]}]\n  (assert (and (or doc-handler handler) (or regex tokenizer-fn)))\n  (cond-> tokenizer\n    (not doc-handler) (assoc :doc-handler (fn [doc {:keys [match]}] (push-node doc (handler match))))\n    (not tokenizer-fn) (assoc :tokenizer-fn (partial re-idx-seq regex))))\n\n(defn tokenize-text-node [{:as tkz :keys [tokenizer-fn doc-handler]} {:as node :keys [text]}]\n  ;; TokenizerFn -> HNode -> [HNode]\n  (assert (and (fn? tokenizer-fn) (fn? doc-handler) (string? text))\n          {:text text :tokenizer tkz})\n  (let [idx-seq (tokenizer-fn text)]\n    (if (seq idx-seq)\n      (let [text-hnode (fn [s] (assoc (text-node s) :doc-handler push-node))\n            {:keys [nodes remaining-text]}\n            (reduce (fn [{:as acc :keys [remaining-text]} [match start end]]\n                      (-> acc\n                          (update :remaining-text subs 0 start)\n                          (cond->\n                            (< end (count remaining-text))\n                            (update :nodes conj (text-hnode (subs remaining-text end))))\n                          (update :nodes conj {:doc-handler doc-handler\n                                               :match match :text text\n                                               :start start :end end})))\n                    {:remaining-text text :nodes ()}\n                    (reverse idx-seq))]\n        (cond-> nodes\n          (seq remaining-text)\n          (conj (text-hnode remaining-text))))\n      [node])))\n\n(defmethod apply-token \"text\" [{:as doc :keys [text-tokenizers]} {:keys [content]}]\n  (reduce (fn [doc {:as node :keys [doc-handler]}] (doc-handler doc (dissoc node :doc-handler)))\n          doc\n          (reduce (fn [nodes tokenizer]\n                    (mapcat (fn [{:as node :keys [type]}]\n                              (if (= :text type) (tokenize-text-node tokenizer node) [node]))\n                            nodes))\n                  [{:type :text :text content :doc-handler push-node}]\n                  text-tokenizers)))\n\n(comment\n  (def mustache (normalize-tokenizer {:regex #\"\\{\\{([^\\{]+)\\}\\}\" :handler (fn [m] {:type :eval :text (m 1)})}))\n  (tokenize-text-node mustache {:text \"{{what}} the {{hellow}}\"})\n  (apply-token (assoc empty-doc :text-tokenizers [mustache])\n               {:type \"text\" :content \"foo [[bar]] dang #hashy taggy [[what]] #dangy foo [[great]] and {{eval}} me\"})\n\n  (nextjournal.markdown/parse \"foo [[bar]] dang #hashy taggy [[what]] #dangy foo [[great]]\" )\n\n  (parse (assoc empty-doc\n                :text-tokenizers\n                [(normalize-tokenizer {:regex #\"\\{\\{([^\\{]+)\\}\\}\"\n                                       :doc-handler (fn [doc {[_ meta] :match}]\n                                                      (update-in doc (pop (pop (::path ddoc))) assoc :meta meta))})])\n         (nextjournal.markdown/tokenize \"# Title {{id=heading}}\n* one\n* two\")))\n\n;; inlines\n(defmethod apply-token \"inline\" [doc {:as _token ts :children}] (apply-tokens doc ts))\n(defmethod apply-token \"math_inline\" [doc {text :content}] (push-node doc (formula text)))\n(defmethod apply-token \"math_inline_double\" [doc {text :content}] (push-node doc (formula text)))\n(defmethod apply-token \"softbreak\" [doc _token] (push-node doc {:type :softbreak}))\n\n;; images\n(defmethod apply-token \"image\" [doc {:keys [attrs children]}] (-> doc (open-node :image attrs) (apply-tokens children) close-node))\n\n;; marks\n(defmethod apply-token \"em_open\" [doc _token] (open-node doc :em))\n(defmethod apply-token \"em_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"strong_open\" [doc _token] (open-node doc :strong))\n(defmethod apply-token \"strong_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"s_open\" [doc _token] (open-node doc :strikethrough))\n(defmethod apply-token \"s_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"link_open\" [doc token] (open-node doc :link (:attrs token)))\n(defmethod apply-token \"link_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"code_inline\" [doc {text :content}] (-> doc (open-node :monospace) (push-node (text-node text)) close-node))\n\n;; html (ignored)\n(defmethod apply-token \"html_inline\" [doc _] doc)\n(defmethod apply-token \"html_block\" [doc _] doc)\n;; endregion\n\n;; region data builder api\n(defn pairs->kmap [pairs] (into {} (map (juxt (comp keyword first) second)) pairs))\n(defn apply-tokens [doc tokens]\n  (let [mapify-attrs-xf (map (fn [x] (update* x :attrs pairs->kmap)))]\n    (reduce (mapify-attrs-xf apply-token) doc tokens)))\n\n(def empty-doc {:type :doc\n                :content []\n                ;; Id -> Nat, to disambiguate ids for nodes with the same textual content\n                ::id->index {}\n                ;; Node -> String, dissoc from context to opt-out of ids\n                :slug-fn (comp ->slug md.transform/->text)\n                :toc {:type :toc}\n                ::path [:content -1] ;; private\n                :text-tokenizers text-tokenizers})\n\n(defn parse\n  \"Takes a doc and a collection of markdown-it tokens, applies tokens to doc. Uses an emtpy doc in arity 1.\"\n  ([tokens] (parse empty-doc tokens))\n  ([doc tokens] (-> doc\n                    (update :text-tokenizers (partial map normalize-tokenizer))\n                    (apply-tokens tokens)\n                    (dissoc ::path :text-tokenizers))))\n\n(comment\n\n (-> \"# Markdown Data\n\nsome _emphatic_ **strong** [link](https://foo.com)\n\n---\n\n> some ~~nice~~ quote\n> for fun\n\n## Formulas\n\n[[TOC]]\n\n$$\\\\Pi^2$$\n\n- [ ]  and\n- [x]  some $\\\\Phi_{\\\\alpha}$ latext\n- [ ]  bullets\n\n## Sidenotes\n\nhere [^mynote] to somewhere\n\n## Fences\n\n```py id=\\\"aaa-bbb-ccc\\\"\n1\nprint(\\\"this is some python\\\")\n2\n3\n```\n\n![Image Text](https://img.icons8.com/officel/16/000000/public.png)\n\nHline Section\n-------------\n\n### but also [[indented code]]\n\n    import os\n    os.listdir('/')\n\nor monospace mark [`real`](/foo/bar) fun.\n\n[^mynote]: Here you _can_ `explain` at lenght\n\"\n     nextjournal.markdown/tokenize\n     parse\n     ;;seq\n     ;;(->> (take 10))\n     ;;(->> (take-last 4))\n     ))\n;; endregion\n\n;; region zoom-in at section\n(defn section-at [{:as doc :keys [content]} [_ pos :as path]]\n  ;; TODO: generalize over path (zoom-in at)\n  ;; supports only top-level headings atm (as found in TOC)\n  (let [{:as h section-level :heading-level} (get-in doc path)\n        in-section? (fn [{l :heading-level}] (or (not l) (< section-level l)))]\n    (when section-level\n      {:type :doc\n       :content (cons h\n                      (->> content\n                           (drop (inc pos))\n                           (take-while in-section?)))})))\n\n(comment\n (some-> \"# Title\n\n## Section 1\n\nfoo\n\n- # What is this? (no!)\n- maybe\n\n### Section 1.2\n\n## Section 2\n\nsome par\n\n### Section 2.1\n\nsome other par\n\n### Section 2.2\n\n#### Section 2.2.1\n\ntwo two one\n\n#### Section 2.2.2\n\ntwo two two\n\n## Section 3\n\nsome final par\"\n    nextjournal.markdown/parse\n    (section-at [:content 9])                         ;; \u2b05 paths are stored in TOC sections\n    nextjournal.markdown.transform/->hiccup))\n;; endregion\n"],"x_google_ignoreList":[0]}