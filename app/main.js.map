{"version":3,"sources":["main.cljs"],"mappings":";AAYA,AAAKA,gBAAS,0DAAA,2CAAA,yFAAA,2CAAA,sEAAA,+EAAA,kEAAA,iEAAA,qEAAA,aAAA,0EAAA,2CAAA,sEAAA,+EAAA,kEAAA,iEAAA,qEAAA,aAAA,2EAAA,2CAAA,sEAAA,+EAAA,kEAAA,iEAAA,qEAAA,aAAA,4FAAA,2CAAA,sEAAA,8EAAA,kEAAA,iEAAA,qEAAA,r/DAACC;AAef,YAAA,ZAAMC,gCAAMC;AAAZ,AACE,IAAMC,WAAS,uBAAA,4CAAA,jEAAM,GAAK,SAAA,RAAMD,iBAAO,AAACE,sCAA8BF;AAAtE,AACE,IAAAG,WAAMF;AAAN,AAAA,GAAA,AAAAG,6CAAA,KAAAD;AAAA,0FAAA,uFAAA,xCASUW;;AATV,GAAA,AAAAV,6CAAA,6DAAAD;AACY,6DAAA,uHAAA,7KAACE,yIAAcC,+BAAcN;;AADzC,GAAA,AAAAI,6CAAA,sEAAAD;AAEiB,6DAAA,6HAAA,nLAACE,yIAAcE,qCAAoBP;;AAFpD,GAAA,AAAAI,6CAAA,2DAAAD;AAQW,6DAAA,uHAAA,7KAACE,yIAAcQ,+BAAcb;;AARxC,GAAA,AAAAI,6CAAA,gEAAAD;AAGa,6DAAA,wHAAA,9KAACE,yIAAcG,gCAAeR;;AAH3C,GAAA,AAAAI,6CAAA,8DAAAD;AAMa,6DAAA,yHAAA,/KAACE,yIAAcM,iCAAgBX;;AAN5C,GAAA,AAAAI,6CAAA,yDAAAD;AAIU,6DAAA,qHAAA,3KAACE,yIAAcI,6BAAYT;;AAJrC,GAAA,AAAAI,6CAAA,+DAAAD;AAOa,6DAAA,yHAAA,/KAACE,yIAAcO,iCAAgBZ;;AAP5C,GAAA,AAAAI,6CAAA,6DAAAD;AAKY,6DAAA,qHAAA,3KAACE,yIAAcK,6BAAYV;;AALvC,AAUE,6DAAA,wHAAA,9KAACK,yIAAcG,gCAAeR;;;;;;;;;;;;AAGpC,AAAA,cAAA,sBAAAe,pCAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,iDAAAF;;;AAAA,AAAA,CAAA,mDAAA,nDAAME,8DACDrB;AADL,AAEE,GAAM,EAAI,AAACyB,uBAAOzB,WAAM,0BAAA,zBAAM,AAAC0B,gBAAM1B;AAArC,AAA6C,AAAC2B,mBAAmB9B;;AAAjE;;AACA,IAAA+B,mBAAA;AAAA,AAAA,AAAAC,aAAAD;;AAAA,IAAAE,qBAAA,AACS,AAACC,sBAAsB,sDAAA,tDAAC1B,yIAAcN,UAAK,iBAAAiC,mBAAI,AAACN,gBAAM1B;AAAX,AAAA,oBAAAgC;AAAAA;;AAAiBnC;;;AADrE,AAAA,AAAAgC,gBAAAD;;AAAAE;;;AAHF,CAAA,sCAAA,tCAAMT;;AAAN;AAAA,CAAA,gCAAA,WAAAC,3CAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAOA,AAACW,2DAAWpC,cACA,WAAKqC;AAAL,AACE,OAACC,mGAAO,AAACC,gDAAO,AAAA,2FAAWF;;AAEzC,YAAA,ZAAeG;AAAf,AACE,AAACV,mBAAmB9B;;AACpB,OAACsC,mGAAOtC","names":["main/app-conn","datascript.core.create_conn","main/root","conn","main-nav","systems.navigation/get-main-nav-state","G__39883","cljs.core._EQ_","reagent.core.as_element","entities.views-library/no-page","entities.views-library/asset-library","entities.views-library/campaign","entities.views-library/realm","entities.views-library/rules","entities.views-library/creatures","entities.views-library/resources","entities.views-library/actions","js/shadow.js.shim.module$react_native.Text","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","main/render","seq39884","self__5755__auto__","cljs.core/seq","cljs.core/empty?","cljs.core/first","init/initialize-db","k__39876__auto__","js/console","res__39877__auto__","expo.root/render-root","or__5045__auto__","datascript.core.listen_BANG_","tx-report","main.render","reagent.core.atom","main/init"],"sourcesContent":["(ns main\r\n  (:require\r\n   [reagent.core :as r]\r\n   [\"react-native\" :as rn]\r\n   [datascript.core :as ds]\r\n   [expo.root :as expo-root]\r\n   [init :as init]\r\n   [systems.navigation :as navigation]\r\n   [entities.views-library :as views])\r\n  (:require-macros\r\n   [main :refer [profile]]))\r\n\r\n(def app-conn (ds/create-conn {:realm/children-entities {:db/cardinality :db.cardinality/many\r\n                                                         :db/valueType :db.type/ref\r\n                                                         :db/isComponent true}\r\n                               :resource/actions {:db/cardinality :db.cardinality/many\r\n                                                  :db/valueType :db.type/ref\r\n                                                  :db/isComponent true}\r\n                               :action/resources {:db/cardinality :db.cardinality/many\r\n                                                  :db/valueType :db.type/ref\r\n                                                  :db/isComponent true}\r\n                               ;; :creature/resources {:db/cardinality :db.cardinality/many\r\n                                                    ;; :db/valueType :db.type/ref}\r\n                               :creature-resource/resource {:db/cardinality :db.cardinality/one\r\n                                                            :db/valueType :db.type/ref\r\n                                                            :db/isComponent true}}))\r\n\r\n(defn root [conn]\r\n  (let [main-nav (when (not (nil? conn)) (navigation/get-main-nav-state conn))]\r\n    (case main-nav\r\n      :settings (r/as-element [views/no-page conn {}])\r\n      :asset-library (r/as-element [views/asset-library conn {}])\r\n      :campaigns (r/as-element [views/campaign conn {}])\r\n      :realms (r/as-element [views/realm conn {}])\r\n      :rulesets (r/as-element [views/rules conn {}])\r\n      :creatures (r/as-element [views/creatures conn {}])\r\n      :resources (r/as-element [views/resources conn {}])\r\n      :actions (r/as-element [views/actions conn {}])\r\n      nil [:> rn/Text \"Error: No database found\"]\r\n      (r/as-element [views/campaign conn {}]))))\r\n\r\n\r\n(defn render\r\n  [& conn]\r\n  (when (or (empty? conn) (nil? (first conn))) (init/initialize-db app-conn))\r\n  (profile \"render\"\r\n           (expo-root/render-root (r/as-element [root (or (first conn) app-conn)]))))\r\n\r\n;; re-render on every DB change\r\n(ds/listen! app-conn\r\n            (fn [tx-report]\r\n              (render (r/atom (:db-after tx-report)))))\r\n\r\n(defn ^:export init []\r\n  (init/initialize-db app-conn)\r\n  (render app-conn))\r\n"]}