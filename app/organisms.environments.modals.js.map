{"version":3,"sources":["organisms/environments/modals.cljs"],"mappings":"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","names":["organisms.environments.modals/modal-content","reagent.core.atom","organisms.environments.modals/hide-modal-content","cljs.core.swap_BANG_","content","cljs.core.assoc","organisms.environments.modals/show-modal-content","p1__39251#","p1__39252#","organisms.environments.modals/example-schema","cljs.core/int?","cljs.core._EQ_","organisms.environments.modals/new-item-modal","schema","new-item-modal-content","cljs.core.doall","cljs.core.mapv","p__39261","vec__39262","cljs.core.nth","schema-element-title","schema-element","G__39268","cljs.core/Keyword","js/Error","organisms.atoms.text_input.default_text_input","js/shadow.js.shim.module$react_native.Text","cljs.core/vec","cljs.core.concat","js/shadow.js.shim.module$react_native.View","organisms.environments.modals/example-new-item-modal","cljs.core/reset!","organisms.environments.modals/modal","cljs.core/deref","cljs.core.apply","save-button","js/shadow.js.shim.module$react_native.Pressable","organisms.config/palette"],"sourcesContent":["(ns organisms.environments.modals\r\n  (:require [cljs.reader :as reader]\r\n            [reagent.core :as r]\r\n            [\"react-native\" :as rn]\r\n            [organisms.config :refer [palette]]\r\n            [organisms.atoms.text-input :as text-input]\r\n            [systems.navigation :as navigation]))\r\n\r\n(def modal-content (r/atom nil))\r\n\r\n(defn hide-modal-content\r\n  []\r\n  (swap! modal-content (fn [content] (assoc content :display? false))))\r\n\r\n(defn show-modal-content\r\n  []\r\n  (swap! modal-content (fn [content] (assoc content :display? true))))\r\n\r\n(def example-schema\r\n  [[:example/number  {:db/valueType  :db.type/long\r\n                      :db.attr/preds #(and (int? (int %)) (< 0 (int %) 5))}]\r\n   [:example/string  {:db/valueType :db.type/string\r\n                      :db.attr/preds #(= \"asdf\" %)}]\r\n   [:example/boolean {:db/valueType :db.type/boolean}]\r\n   [:example/ref     {:db/valueType :db.type/ref}]])\r\n\r\n(defn new-item-modal\r\n  [schema]\r\n  (let [new-item-modal-content\r\n        (doall\r\n         (mapv\r\n          (fn [[schema-element-title schema-element]]\r\n            (case (:db/valueType schema-element)\r\n              :db.type/long (text-input/default-text-input\r\n                             schema-element-title\r\n                             schema-element-title\r\n                             (:db.attr/preds schema-element))\r\n              :db.type/string (text-input/default-text-input\r\n                               schema-element-title\r\n                               schema-element-title\r\n                               (:db.attr/preds schema-element))\r\n              :db.type/boolean [:> rn/Text {:style {:color :white}} \"Toggle!\"]\r\n              :db.type/ref [:> rn/Text {:style {:color :white}} \"Ref!\"]))\r\n          schema))]\r\n    (vec (concat [:> rn/View] new-item-modal-content))))\r\n\r\n\r\n\r\n(def example-new-item-modal\r\n  #(reset! modal-content {:fn new-item-modal :args [example-schema] :display? true}))\r\n\r\n(defn modal\r\n  []\r\n  (when (:display? @modal-content)\r\n    (let [content (apply (:fn @modal-content) (:args @modal-content))\r\n          save-button (when (:save-fn @modal-content)\r\n                        (apply (:save-fn @modal-content) (:save-args @modal-content)))]\r\n      [:> rn/View {:style {:position :absolute :width \"100%\" :height \"100%\" :background-color \"rgba(0, 0, 0, 0.6)\" :justify-content :flex-end}}\r\n       [:> rn/Pressable {:style {:flex 100 :width \"100%\"}\r\n                         :on-press (fn []\r\n                                     (when (:close-fn @modal-content)\r\n                                       (apply (:close-fn @modal-content)\r\n                                              (:close-args @modal-content)))\r\n                                     (reset! modal-content nil))}]\r\n       [:> rn/View {:style {:border-width 2 :border-color (:surface-700 @palette) :background-color (:surface-100 @palette) :width \"100%\" :max-height \"80%\"}}\r\n        content\r\n        [:> rn/View {:style {:position :absolute :right 5 :top 5}}\r\n         save-button]]])))\r\n"]}