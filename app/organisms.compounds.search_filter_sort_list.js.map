{"version":3,"sources":["organisms/compounds/search_filter_sort_list.cljs"],"mappings":"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","names":["organisms.compounds.search-filter-sort-list/external-search-text","reagent.core.atom","organisms.compounds.search-filter-sort-list/collapse-state","organisms.compounds.search-filter-sort-list/collapse-chevron-down","js/shadow.js.shim.module$$expo$vector_icons.FontAwesome5","cljs.core/deref","organisms.config/palette","organisms.compounds.search-filter-sort-list/collapse-chevron-up","organisms.compounds.search-filter-sort-list/list-collapse-button","component-key","header-text","organisms.atoms.buttons/button","cljs.core.swap_BANG_","collapse-map","cljs.core.update","cljs.core/not","js/shadow.js.shim.module$react_native.View","cljs.core.get","organisms.compounds.search-filter-sort-list/default-sort-manager","organisms.compounds.search-filter-sort-list/add-item-button","add-item-fn","p__39164","map__39169","cljs.core/--destructure-map","organisms.compounds.search-filter-sort-list/search-filter-sort-list","list-header","column-flex-vals","column-headers","collapsed?","items","item-format-fn","search-filter-sort-component","sort-manager","cljs.core/contains?","p1__39147#","cljs.core.assoc","organisms.atoms.text.default_text","list-function","cljs.core/first","organisms.molecules.lists/SectionList","organisms.molecules.lists/FlatList","G__39202","cljs.core.into","cljs.core.map","_","or__5045__auto__"],"sourcesContent":["(ns organisms.compounds.search-filter-sort-list\r\n  (:require [clojure.string :as str]\r\n            [datascript.core :as ds]\r\n            [reagent.core :as r]\r\n            [\"react-native\" :as rn]\r\n            [\"@expo/vector-icons\" :refer [FontAwesome5]]\r\n            [organisms.config :refer [palette]]\r\n            [organisms.molecules.lists :refer [SectionList FlatList]]\r\n            [organisms.molecules.search-bar :refer [search-bar]]\r\n            [organisms.molecules.filter-section :refer [filter-button]]\r\n            [organisms.atoms.text :as text]\r\n            [organisms.atoms.buttons :as buttons]))\r\n\r\n(def external-search-text (r/atom {}))\r\n(def collapse-state (r/atom {}))\r\n\r\n(defn collapse-chevron-down\r\n  []\r\n  [:> FontAwesome5 {:name :chevron-down\r\n                    :color (:surface-700 @palette)\r\n                    :size 20}])\r\n\r\n(defn collapse-chevron-up\r\n  []\r\n  [:> FontAwesome5 {:name :chevron-up\r\n                    :color (:surface-700 @palette)\r\n                    :size 20}])\r\n\r\n(defn list-collapse-button\r\n  [component-key header-text]\r\n  (buttons/button {:style {:background-color :inherit :align-items :center :justify-content :center}\r\n                   :on-press #(swap! collapse-state (fn [collapse-map]\r\n                                                      (update collapse-map component-key not)))}\r\n                  [:> rn/View {:style {:flex-direction :row :align-items :center :justify-content :center}}\r\n                   header-text\r\n                   [:> rn/View {:style {:padding-left 5}}\r\n                    (if (get @collapse-state component-key)\r\n                      (collapse-chevron-down)\r\n                      (collapse-chevron-up))]]))\r\n\r\n(def default-sort-manager\r\n  (r/atom {\"Title\" {:asc? true :order 1}}))\r\n\r\n(defn add-item-button\r\n  [add-item-fn]\r\n  (buttons/button {:style {:background-color (:surface-200 @palette)\r\n                           :align-items :center\r\n                           :justify-content :center}\r\n                   :on-press add-item-fn}\r\n                  [:> FontAwesome5 {:name :plus :color (:surface-700 @palette) :size 20}]))\r\n\r\n(defn search-filter-sort-list\r\n  [{:keys [list-header column-flex-vals column-headers\r\n           collapsed?\r\n           items item-format-fn add-item-fn\r\n           search-filter-sort-component sort-manager]}\r\n   component-key]\r\n  (when (and (some? collapsed?)\r\n             (not (contains? @collapse-state component-key)))\r\n    (swap! collapse-state #(assoc % component-key collapsed?)))\r\n  (let [header-text (text/default-text list-header\r\n                                       {:font-size 24\r\n                                        :flex 0\r\n                                        :text-align :center})]\r\n    [:> rn/View {:style {:width \"100%\" :max-height \"100%\" :flex 100 :padding 10}}\r\n     (if (not (nil? collapsed?))\r\n       (list-collapse-button component-key header-text)\r\n       header-text)\r\n     (when-not (get @collapse-state component-key)\r\n       [:> rn/View\r\n        [:> rn/View {:style {:flex-direction :row :justify-content :center :width \"100%\"}}\r\n         search-filter-sort-component]])\r\n     (when-not (get @collapse-state component-key)\r\n       (let [list-function (if (:data (first items)) SectionList FlatList)]\r\n         (list-function\r\n          {:items items\r\n           :headers (if (string? (first column-headers))\r\n                      (into {} (map (fn [header-text]\r\n                                      [header-text {:header header-text\r\n                                                    :sort-fn (fn [_] nil)}])\r\n                                    column-headers))\r\n                      column-headers)\r\n           :flex-vals column-flex-vals\r\n           :item-format-fn item-format-fn\r\n           :sort-manager (or sort-manager default-sort-manager)})))\r\n     (when add-item-fn (add-item-button add-item-fn))]))\r\n"]}