{"version":3,"sources":["entities/creatures/data/core.cljc"],"mappings":"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","names":["entities.creatures.data.core/get-all-creature-ids","conn","cljs.core.map","cljs.core/first","G__39347","G__39348","cljs.core/deref","datascript.core/q","entities.creatures.data.core/get-all-creatures","temp__5804__auto__","realm-ids","G__39349","G__39350","G__39351","datascript.core/pull-many","entities.creatures.data.core/get-active-creature-id","nav-state","systems.navigation/get-main-nav-state-list","cljs.core._EQ_","cljs.core/count","cljs.core/second","entities.creatures.data.core/get-active-creature","active-creature-id","G__39352","G__39353","G__39354","datascript.core/pull","entities.creatures.data.core/get-active-creature-tracker","cljs.core/ffirst","G__39355","G__39356","entities.creatures.data.core/set-active-creature","creature-id","temp__5802__auto__","active-creature-tracker","datascript.core.transact_BANG_","systems.navigation/subnavigate","entities.creatures.data.core/creature-races","entities.creatures.data.core/get-creature-races","creature-data","G__39357","G__39358","G__39359","entities.creatures.data.core/get-creature-domains","G__39360","G__39361","G__39362","entities.creatures.data.core/get-domain-damage","domain-id","wound-type","G__39363","G__39364","G__39365","G__39366","entities.creatures.data.core/unshown-severity?","wound-tiers","wound-severity","G__39367","js/Error","clojure.string/lower-case","p__39368","map__39369","cljs.core/--destructure-map","cljs.core.get","entities.creatures.data.core/rebalance-wounds","minor","moderate","major","entities.campaigns.data.interface/get-campaign-active-ruleset","G__39370","entities.creatures.data.core/get-wound-values","entities.creatures.data.core/update-wound-value","update-fn","wound-type-keyword","cljs.core.keyword","wound-values","new-wound-value","G__39371","cljs.core.assoc","entities.creatures.data.core/get-creature-domain-damage","wound-value","G__39372","entities.creatures.data.core/get-creature-domain-damage-total","entities.creatures.data.core/get-creature-resources","G__39373","G__39374","G__39375","entities.creatures.data.core/get-creature-resources-from-data","G__39376","G__39377","G__39378","entities.creatures.data.core/get-creature-resource-resources","creature-resources","entities.creatures.data.core/get-creature-actions","G__39379","G__39380","G__39381","entities.creatures.data.core/example-creatures","default-domain-entities","example-resources","default-actions","entities.creatures.data.core/new-creature-defaults","cljs.core/random-uuid","entities.creatures.data.core/creature-eid-by-name","creature-name","G__39382","G__39383","G__39384","entities.creatures.data.core/creature-info","G__39385","G__39386","G__39387","entities.creatures.data.core/creature-domains","conn*","datascript.core.conn_from_datoms","cljs.core.into","p__39388","vec__39389","cljs.core.nth","k","v","datascript.core/datom","creature-domains","G__39392","G__39393","domains-data","G__39394","G__39395","G__39396","entities.creatures.data.core/all-creatures","G__39397","G__39398","entities.creatures.data.core/get-creature-by-id","G__39399","G__39400","G__39401","entities.creatures.data.core/pull-full-creature","entities.creatures.data.core/pull-creature-name","entities.creatures.data.core/get-creature-by-name","q","pattern","G__39410","G__39411","G__39412","G__39413"],"sourcesContent":["(ns entities.creatures.data.core\r\n  (:require [clojure.string :as str]\r\n            [datascript.core :as ds]\r\n            [systems.navigation :as navigation]\r\n            [entities.campaigns.data.interface :as campaign-data]\r\n            [entities.rulesets.data.interface :as domains]))\r\n\r\n(defn get-all-creature-ids\r\n  [conn]\r\n  (map first (ds/q '[:find ?e\r\n                     :where [?e :entity-type \"creature\"]]\r\n                   @conn)))\r\n\r\n(defn get-all-creatures\r\n  [conn]\r\n  (when-let [realm-ids (get-all-creature-ids conn)]\r\n    (ds/pull-many @conn '[*] realm-ids)))\r\n\r\n(defn get-active-creature-id\r\n  [conn]\r\n  (let [nav-state (navigation/get-main-nav-state-list conn)]\r\n    (when (and (= \"creatures\" (first nav-state))\r\n               (< 1 (count nav-state)))\r\n      (int (second nav-state)))))\r\n\r\n(defn get-active-creature\r\n  [conn]\r\n  (when-let [active-creature-id (get-active-creature-id conn)]\r\n    (ds/pull @conn '[*] active-creature-id)))\r\n\r\n(defn get-active-creature-tracker\r\n  [conn]\r\n  (ffirst (ds/q '[:find ?e\r\n                  :where [?e :active/creature]]\r\n                @conn)))\r\n\r\n(defn set-active-creature\r\n  [conn creature-id]\r\n  (if-let [active-creature-tracker (get-active-creature-tracker conn)]\r\n    (ds/transact! conn [{:db/id active-creature-tracker\r\n                         :active/creature creature-id}])\r\n    (ds/transact! conn [{:active/creature creature-id}]))\r\n  (navigation/subnavigate conn creature-id))\r\n\r\n\r\n(def creature-races [{:db/ident :race/elf\r\n                      :race/title \"Elf\"}\r\n                     {:db/ident :race/human\r\n                      :race/title \"Human\"}\r\n                     {:db/ident :race/dwarf\r\n                      :race/title \"Dwarf\"}])\r\n\r\n(defn get-creature-races\r\n  [conn creature-data]\r\n  (map :race/title (ds/pull-many @conn '[:race/title] (:creature/races creature-data))))\r\n\r\n(defn get-creature-domains\r\n  [conn creature-data]\r\n  (ds/pull-many @conn '[*] (:creature/domains creature-data)))\r\n\r\n(defn get-domain-damage\r\n  [conn domain-id wound-type]\r\n  (ffirst (ds/q '[:find ?wound-quantity\r\n                  :in $ ?id ?key\r\n                  :where [?id ?key ?wound-quantity]]\r\n                @conn domain-id wound-type)))\r\n\r\n(defn unshown-severity?\r\n  [wound-tiers wound-severity]\r\n  (case wound-tiers\r\n    3 false\r\n    2 (= (str/lower-case wound-severity) \"major\")\r\n    1 (not (= (str/lower-case wound-severity) \"minor\"))))\r\n\r\n(defn rebalance-wounds\r\n  [conn domain-id {:strs [minor moderate major]}]\r\n  (let [wound-tiers (:ruleset/wound-tiers (campaign-data/get-campaign-active-ruleset conn))]\r\n    (case wound-tiers\r\n      3 nil\r\n      2 (when (< 0 major)\r\n          (ds/transact! conn [{:db/id domain-id\r\n                               :domain/major-wounds (dec major)}])\r\n          (ds/transact! conn [{:db/id domain-id\r\n                               :domain/moderate-wounds (inc moderate)}])\r\n          (ds/transact! conn [{:db/id domain-id\r\n                               :domain/minor-wounds (inc minor)}]))\r\n      1 (if (< 0 major)\r\n          (do (ds/transact! conn [{:db/id domain-id\r\n                                   :domain/major-wounds (dec major)}])\r\n              (ds/transact! conn [{:db/id domain-id\r\n                                   :domain/moderate-wounds (inc moderate)}])\r\n              (ds/transact! conn [{:db/id domain-id\r\n                                   :domain/minor-wounds (inc minor)}]))\r\n          (when (< 0 moderate)\r\n            (ds/transact! conn [{:db/id domain-id\r\n                                 :domain/moderate-wounds (dec moderate)}])\r\n            (ds/transact! conn [{:db/id domain-id\r\n                                 :domain/minor-wounds (inc (inc minor))}]))))))\r\n\r\n(defn get-wound-values\r\n  [conn domain-id]\r\n  {\"minor\" (get-domain-damage conn domain-id :domain/minor-wounds)\r\n   \"moderate\" (get-domain-damage conn domain-id :domain/moderate-wounds)\r\n   \"major\" (get-domain-damage conn domain-id :domain/major-wounds)})\r\n\r\n(defn update-wound-value\r\n  [conn domain-id wound-severity update-fn]\r\n  (let [wound-type-keyword (keyword (str \"domain/\" (str/lower-case wound-severity) \"-wounds\"))\r\n        wound-values (get-wound-values conn domain-id)\r\n        new-wound-value (update-fn (get wound-values (str/lower-case wound-severity)))]\r\n    (if (<= 0 new-wound-value)\r\n      (ds/transact! conn [{:db/id domain-id\r\n                           wound-type-keyword new-wound-value}])\r\n      (rebalance-wounds conn domain-id (assoc wound-values (str/lower-case wound-severity) new-wound-value)))))\r\n\r\n(defn get-creature-domain-damage\r\n  [conn domain-id wound-severity]\r\n  (let [wound-tiers (:ruleset/wound-tiers (campaign-data/get-campaign-active-ruleset conn))\r\n        wound-values (get-wound-values conn domain-id)\r\n        wound-value (get wound-values wound-severity)]\r\n    (case wound-tiers\r\n      3 wound-value\r\n      2 (+ wound-value (get wound-values \"major\"))\r\n      1 (+ wound-value (* 3 (get wound-values \"major\")) (* 2 (get wound-values \"moderate\"))))))\r\n\r\n(defn get-creature-domain-damage-total\r\n  [conn domain-id]\r\n  (+ (get-domain-damage conn domain-id :domain/minor-wounds)\r\n     (* 2 (get-domain-damage conn domain-id :domain/moderate-wounds))\r\n     (* 3 (get-domain-damage conn domain-id :domain/major-wounds))))\r\n\r\n(defn get-creature-resources\r\n  [conn creature-id]\r\n  (map first\r\n       (ds/q '[:find ?resources\r\n               :in $ ?creature-id\r\n               :where [?creature-id :creature/resources ?resources]]\r\n             @conn creature-id)))\r\n\r\n(defn get-creature-resources-from-data\r\n  [conn creature-data]\r\n  (ds/pull-many @conn '[*] (:creature/resources creature-data)))\r\n\r\n(defn get-creature-resource-resources\r\n  [conn creature-data]\r\n  (let [creature-resources (get-creature-resources-from-data conn creature-data)]\r\n    (map :creature-resource/resource creature-resources)))\r\n\r\n(defn get-creature-actions\r\n  [conn creature-id]\r\n  (ds/q '[:find ?actions\r\n          :in $ ?creature-id\r\n          :where [?creature-id :creature/actions ?actions]]\r\n        @conn creature-id))\r\n\r\n(defn example-creatures\r\n  [default-domain-entities example-resources default-actions]\r\n  [{:creature/domains default-domain-entities\r\n    :title \"Aleksander\"\r\n    :entity-type \"creature\"\r\n    :creature/portrait \"https://i.pinimg.com/originals/d8/30/bc/d830bc587482ed8af3639903c5d406b4.png\"\r\n    :creature/gender \"Male\"\r\n    :creature/race [:race/elf :race/human]\r\n    :creature/description \"Aleksander is a really cool dude.\"\r\n    :creature/experience 0\r\n    :creature/damage []\r\n    :creature/resources example-resources\r\n    :creature/actions default-actions\r\n    :creature/notes \"Notes about Aleksander\"\r\n    :creature/rolls []}\r\n   {:creature/domains default-domain-entities\r\n    :title \"Eilonwey\"\r\n    :entity-type \"creature\"\r\n    :creature/gender \"Female\"\r\n    :creature/race [:race/elf]\r\n    :creature/description \"Eilonwey is a badass.\"\r\n    :creature/experience 0\r\n    :creature/damage []\r\n    :creature/resources example-resources\r\n    :creature/actions default-actions\r\n    :creature/notes \"Notes about Eilonwey\"\r\n    :creature/rolls []}\r\n   {:creature/domains default-domain-entities\r\n    :entity-type \"creature\"\r\n    :title \"Durflag\"\r\n    :creature/race [:race/dwarf]\r\n    :creature/description \"Durflag is a badass as well.\"\r\n    :creature/experience 0\r\n    :creature/damage []\r\n    :creature/resources example-resources\r\n    :creature/actions default-actions\r\n    :creature/notes \"Notes about Durflag\"\r\n    :creature/rolls []}])\r\n\r\n(defn new-creature-defaults\r\n  \"A transaction schema for a new creature\"\r\n  []\r\n  {:creature/id #?(:clj (java.util.UUID/randomUUID) :cljs (random-uuid))\r\n   :creature/domains \"Domains\"})\r\n\r\n\r\n\r\n(defn creature-eid-by-name\r\n  [conn creature-name]\r\n  (ffirst (ds/q '[:find ?e\r\n                  :in $ ?creature-name\r\n                  :where [?e :creature/name ?creature-name]]\r\n                @conn creature-name)))\r\n\r\n(defn creature-info\r\n  [conn creature-name]\r\n  (ds/pull @conn '[*] (creature-eid-by-name conn creature-name)))\r\n\r\n(defn creature-domains\r\n  [conn creature-data]\r\n  (let [conn* (ds/conn-from-datoms (into #{} (map (fn [[k v]] (ds/datom 1 k v)) creature-data)))\r\n        creature-domains (ffirst (ds/q '[:find ?domains\r\n                                              :where [_ :creature/domains ?domains]]\r\n                                            @conn*))\r\n        domains-data (ds/pull @conn '[*] (first creature-domains))]\r\n    domains-data))\r\n\r\n(defn all-creatures\r\n  [conn]\r\n  (ds/q '[:find ?e\r\n          :where [?e :creature/name]]\r\n        @conn))\r\n\r\n(defn get-creature-by-id\r\n  [conn creature-id]\r\n  (ds/pull @conn '[*] creature-id))\r\n\r\n;; Pull Patterns\r\n;; Pull patterns define the structure of the data to be returned given an entity id\r\n\r\n(def pull-full-creature\r\n  ['* :creature/race {:creature/domains [:domain/name]}])\r\n\r\n(def pull-creature-name\r\n  [:creature/name])\r\n\r\n\r\n;; Queries\r\n;; Queries retrieve entity ids, attributes, values, and times from the database\r\n\r\n(defn get-creature-by-name\r\n  \"Returns creature information for all creature's with a given name\r\n\r\n  Arguments:\r\n   - db connection\r\n   - Pull Pattern for a creature entity\r\n   - A String that matches on the :creature/name value\r\n  Returns:\r\n   - creature entity data structured with the given pull pattern\"\r\n  [q conn pattern creature-name]\r\n  (map first\r\n       (q '{:find [(pull ?eid pattern)]\r\n              :in [$ pattern ?creature-name]\r\n              :where [[?eid :creature/name ?creature-name]]}\r\n            @conn\r\n            pattern\r\n            creature-name)))\r\n"]}