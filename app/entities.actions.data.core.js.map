{"version":3,"sources":["entities/actions/data/core.cljc"],"mappings":"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","names":["entities.actions.data.core/example-actions","entities.actions.data.core/get-all-actions","conn","action-eids","cljs.core.map","cljs.core/first","G__39415","G__39416","cljs.core/deref","datascript.core/q","G__39419","G__39420","G__39421","datascript.core/pull-many","entities.actions.data.core/get-action-data","action-id","G__39424","G__39425","G__39426","datascript.core/pull","entities.actions.data.core/get-splinters","cljs.core/ffirst","G__39429","G__39430","G__39431","entities.actions.data.core/reset-combinations","splinters","datascript.core.transact_BANG_","cljs.core/vec","cljs.core.repeat","entities.actions.data.core/reset-splinters","entities.actions.data.core/get-selected-skill","G__39437","G__39438","G__39439","entities.actions.data.core/set-selected-skill","skill","entities.actions.data.core/get-selected-ability","G__39449","G__39450","G__39451","entities.actions.data.core/set-selected-ability","ability","entities.actions.data.core/get-selected-skill-domain","G__39469","G__39470","G__39471","entities.actions.data.core/set-selected-skill-domain","domain-id","entities.actions.data.core/get-selected-ability-domain","G__39486","G__39487","G__39488","entities.actions.data.core/set-selected-ability-domain","entities.actions.data.core/get-selected-resources","G__39495","G__39496","G__39497","entities.actions.data.core/toggle-resource-selection","resource-id","selected-resources","or__5045__auto__","p1__39498#","cljs.core/some","cljs.core._EQ_","cljs.core/cons","entities.actions.data.core/get-dice-penalties","G__39505","G__39506","G__39507","entities.actions.data.core/update-dice-penalties","update-fn","current-dice-penalty","updated-dice-penalty","entities.actions.data.core/get-dice-bonuses","G__39510","G__39511","G__39512","entities.actions.data.core/update-dice-bonuses","current-dice-bonus","updated-dice-bonus","entities.actions.data.core/get-dice-modifier","penalties","bonuses","entities.actions.data.core/get-flat-penalties","G__39513","G__39514","G__39515","entities.actions.data.core/update-flat-penalties","current-flat-penalty","updated-flat-penalty","entities.actions.data.core/get-flat-bonuses","G__39517","G__39518","G__39519","entities.actions.data.core/update-flat-bonuses","current-flat-bonus","updated-flat-bonus","entities.actions.data.core/get-flat-modifier","entities.actions.data.core/update-splinters","current-splinters","updated-splinters","max-splinters","entities.actions.data.core/get-calculated-action-pool-info","entities.actions.data.core/update-combinations","index","current-combinations","G__39520","G__39521","G__39522","dice-pool-to-update","cljs.core.get","min-combination","max-combination","updated-combination","G__39523","cljs.core.assoc","entities.actions.data.core/divide-evenly","n","m","q","cljs.core/quot","r","cljs.core/rem","cljs.core.concat","p__39524","vec__39525","cljs.core.nth","entities.actions.data.core/apply-combination","dice-quantity","dice-size","dice-mod","combination","new-quantities","new-dice-sizes","new-mods","cljs.core.remove","cljs.core/nil?","qty","size","mod","cljs.core/PersistentVector","number-of-splits","entities.actions.data.core/format-dice-pool-text","pool","cljs.core.interpose","p__39537","vec__39538","quantity","modifier","entities.actions.data.core/format-dice-pools-text","pools","entities.actions.data.core/format-dice-pool-icons","total-modifier","cljs.core.apply","cljs.core/+","cljs.core/last","cljs.core.conj","cljs.core.mapv","p__39543","vec__39544","_","js/shadow.js.shim.module$react_native.View","js/shadow.js.shim.module$$expo$vector_icons.MaterialCommunityIcons","cljs.core/abs","G__39547","G__39548","organisms.library/default-text","entities.actions.data.core/format-dice-pools-icons","entities.actions.data.core/calc-quantity-and-size","size-level-diff","quantity-level-diff","total-diff","new-quantity","x__5130__auto__","y__5131__auto__","new-size","map__39553","cljs.core/--destructure-map","skill-domain","ability-domain","resources","combinations","action-data","ruleset-stat-granularity","entities.campaigns.data.interface/get-campaign-active-ruleset","cljs.core/integer?","vec__39556","skill-domain-data","G__39559","G__39560","G__39561","ability-domain-data","G__39563","G__39564","G__39565","skill-value","entities.rulesets.data.interface/get-simple-domain-skill-value","cljs.core.keyword","ability-value","G__39566","entities.rulesets.data.interface/get-simple-domain-ability-value","resource-dice-mod","resource-flat-mod","flat-mod","base-dice-quantity","base-dice-size","base-dice-mod","splintered-quantities","splintered-mods","dice-pools","cljs.core/vector","combined-dice-pools","formatted-dice-pools","cljs.core/str","p1__39551#","formatted-dice-pools-icons","entities.actions.data.core/get-dice-pools","entities.actions.data.core/get-combined-dice-pools","entities.actions.data.core/get-fully-formatted-roll","entities.actions.data.core/roll-dice-pool","rolls","p__39580","vec__39581","cljs.core.take","cljs.core.repeatedly","cljs.core/rand-int","cljs.core/max","all-rolls","cljs.core/flatten","bonus","final-result"],"sourcesContent":["(ns entities.actions.data.core\r\n  (:require [datascript.core :as ds]\r\n            [\"react-native\" :as rn]\r\n            [\"@expo/vector-icons\" :refer [MaterialCommunityIcons]]\r\n            [entities.campaigns.data.interface :as campaign-data]\r\n            [entities.rulesets.data.interface :as rulesets-data]\r\n            [organisms.library :as components]))\r\n\r\n(def example-actions\r\n  [{:title \"Physical Health Check\"\r\n    :entity-type \"action\"\r\n    :action/description \"\"\r\n    :action/skill-domain 13\r\n    :action/skill \"Endurance\"\r\n    :action/ability-domain 13\r\n    :action/ability \"resilience-value\"\r\n    :action/resources []\r\n    :action/dice-penalty 0\r\n    :action/dice-bonus 0\r\n    :action/flat-penalty 0\r\n    :action/flat-bonus 0\r\n    :action/splinters 1\r\n    :action/combinations [0]\r\n    :action/target-number 0}\r\n\r\n   {:title \"Spiritual Health Check\"\r\n    :entity-type \"action\"\r\n    :action/description \"\"\r\n    :action/skill-domain 14\r\n    :action/skill \"Perseverance\"\r\n    :action/ability-domain 14\r\n    :action/ability \"resilience-value\"\r\n    :action/resources []\r\n    :action/dice-penalty 0\r\n    :action/dice-bonus 0\r\n    :action/flat-penalty 0\r\n    :action/flat-bonus 0\r\n    :action/splinters 1\r\n    :action/combinations [0]\r\n    :action/target-number 0}\r\n\r\n   {:title \"Mental Health Check\"\r\n    :entity-type \"action\"\r\n    :action/description \"\"\r\n    :action/skill-domain 15\r\n    :action/skill \"Comprehension\"\r\n    :action/ability-domain 15\r\n    :action/ability \"resilience-value\"\r\n    :action/resources []\r\n    :action/dice-penalty 0\r\n    :action/dice-bonus 0\r\n    :action/flat-penalty 0\r\n    :action/flat-bonus 0\r\n    :action/splinters 1\r\n    :action/combinations [0]\r\n    :action/target-number 0}\r\n\r\n   {:title \"Social Health Check\"\r\n    :entity-type \"action\"\r\n    :action/description \"\"\r\n    :action/skill-domain 16\r\n    :action/skill \"Connections\"\r\n    :action/ability-domain 16\r\n    :action/ability \"resilience-value\"\r\n    :action/resources []\r\n    :action/dice-penalty 0\r\n    :action/dice-bonus 0\r\n    :action/flat-penalty 0\r\n    :action/flat-bonus 0\r\n    :action/splinters 1\r\n    :action/combinations [0]\r\n    :action/target-number 0}])\r\n\r\n(defn get-all-actions [conn]\r\n  (let [action-eids (map first (ds/q '[:find ?eid\r\n                                       :where [?eid :action/skill]]\r\n                                     @conn))]\r\n    (ds/pull-many @conn '[*] action-eids)))\r\n\r\n(defn get-action-data\r\n  [conn action-id]\r\n  (ds/pull @conn '[*] action-id))\r\n\r\n(declare get-calculated-action-pool-info)\r\n\r\n(defn get-splinters\r\n  [conn action-id]\r\n  (ffirst (ds/q '[:find ?splinters\r\n                  :in $ ?action-id\r\n                  :where [?action-id :action/splinters ?splinters]]\r\n                @conn action-id)))\r\n\r\n(defn reset-combinations\r\n  [conn action-id]\r\n  (let [splinters (get-splinters conn action-id)]\r\n    (ds/transact! conn [{:db/id action-id\r\n                          :action/combinations (vec (repeat splinters 0))}])))\r\n\r\n(defn reset-splinters\r\n  [conn action-id]\r\n  (ds/transact! conn [{:db/id            action-id\r\n                       :action/splinters 1}]))\r\n\r\n\r\n(defn get-selected-skill\r\n  [conn action-id]\r\n  (ffirst\r\n   (ds/q '[:find ?skill\r\n           :in $ ?action-id\r\n           :where [?action-id :action/skill ?skill]]\r\n         @conn action-id)))\r\n\r\n(defn set-selected-skill\r\n  [conn action-id skill]\r\n  (reset-splinters conn action-id)\r\n  (reset-combinations conn action-id)\r\n  (ds/transact! conn [{:db/id action-id\r\n                       :action/skill skill}]))\r\n\r\n(defn get-selected-ability\r\n  [conn action-id]\r\n  (ffirst\r\n   (ds/q '[:find ?ability\r\n           :in $ ?action-id\r\n           :where [?action-id :action/ability ?ability]]\r\n         @conn action-id)))\r\n\r\n(defn set-selected-ability\r\n  [conn action-id ability]\r\n  (reset-splinters conn action-id)\r\n  (reset-combinations conn action-id)\r\n  (ds/transact! conn [{:db/id action-id\r\n                       :action/ability ability}]))\r\n\r\n(defn get-selected-skill-domain\r\n  [conn action-id]\r\n  (ffirst\r\n   (ds/q '[:find ?domain\r\n           :in $ ?action-id\r\n           :where [?action-id :action/skill-domain ?domain]]\r\n         @conn action-id)))\r\n\r\n(defn set-selected-skill-domain\r\n  [conn action-id domain-id]\r\n  (reset-splinters conn action-id)\r\n  (reset-combinations conn action-id)\r\n  (ds/transact! conn [{:db/id action-id\r\n                       :action/skill-domain domain-id}]))\r\n\r\n(defn get-selected-ability-domain\r\n  [conn action-id]\r\n  (ffirst\r\n   (ds/q '[:find ?domain\r\n           :in $ ?action-id\r\n           :where [?action-id :action/ability-domain ?domain]]\r\n         @conn action-id)))\r\n\r\n(defn set-selected-ability-domain\r\n  [conn action-id domain-id]\r\n  (reset-splinters conn action-id)\r\n  (reset-combinations conn action-id)\r\n  (ds/transact! conn [{:db/id action-id\r\n                       :action/ability-domain domain-id}]))\r\n\r\n(defn get-selected-resources\r\n  [conn action-id]\r\n  (map first (ds/q '[:find ?resources\r\n                     :in $ ?action-id\r\n                     :where [?action-id :action/resources ?resources]]\r\n                   @conn action-id)))\r\n\r\n(defn toggle-resource-selection\r\n  [conn resource-id action-id]\r\n  (let [selected-resources (or (get-selected-resources conn action-id) [])]\r\n    (if (some #(= resource-id %) selected-resources)\r\n      (do (reset-splinters conn action-id)\r\n          (reset-combinations conn action-id)\r\n          (ds/transact! conn [[:db/retract action-id\r\n                               :action/resources resource-id]]))\r\n      (do (reset-splinters conn action-id)\r\n          (reset-combinations conn action-id)\r\n          (ds/transact! conn [{:db/id action-id\r\n                               :action/resources (cons resource-id selected-resources)}])))))\r\n\r\n(defn get-dice-penalties\r\n  [conn action-id]\r\n  (ffirst (ds/q '[:find ?penalties\r\n                  :in $ ?action-id\r\n                  :where [?action-id :action/dice-penalty ?penalties]]\r\n        @conn action-id)))\r\n\r\n(defn update-dice-penalties\r\n  [conn action-id update-fn]\r\n  (let [current-dice-penalty (get-dice-penalties conn action-id)\r\n        updated-dice-penalty (update-fn current-dice-penalty)]\r\n    (when (<= 0 updated-dice-penalty)\r\n      (reset-splinters conn action-id)\r\n      (reset-combinations conn action-id)\r\n      (ds/transact! conn [{:db/id action-id\r\n                          :action/dice-penalty updated-dice-penalty}]))))\r\n\r\n(defn get-dice-bonuses\r\n  [conn action-id]\r\n  (ffirst (ds/q '[:find ?penalties\r\n                  :in $ ?action-id\r\n                  :where [?action-id :action/dice-bonus ?penalties]]\r\n        @conn action-id)))\r\n\r\n(defn update-dice-bonuses\r\n  [conn action-id update-fn]\r\n  (let [current-dice-bonus (get-dice-bonuses conn action-id)\r\n        updated-dice-bonus (update-fn current-dice-bonus)]\r\n    (when (<= 0 updated-dice-bonus)\r\n      (reset-splinters conn action-id)\r\n      (reset-combinations conn action-id)\r\n      (ds/transact! conn [{:db/id action-id\r\n                          :action/dice-bonus updated-dice-bonus}]))))\r\n\r\n(defn get-dice-modifier\r\n  [conn action-id]\r\n  (let [penalties (get-dice-penalties conn action-id)\r\n        bonuses (get-dice-bonuses conn action-id)]\r\n    (- bonuses penalties)))\r\n\r\n(defn get-flat-penalties\r\n  [conn action-id]\r\n  (ffirst (ds/q '[:find ?penalties\r\n                  :in $ ?action-id\r\n                  :where [?action-id :action/flat-penalty ?penalties]]\r\n        @conn action-id)))\r\n\r\n(defn update-flat-penalties\r\n  [conn action-id update-fn]\r\n  (let [current-flat-penalty (get-flat-penalties conn action-id)\r\n        updated-flat-penalty (update-fn current-flat-penalty)]\r\n    (when (<= 0 updated-flat-penalty)\r\n      (reset-splinters conn action-id)\r\n      (reset-combinations conn action-id)\r\n      (ds/transact! conn [{:db/id               action-id\r\n                           :action/flat-penalty updated-flat-penalty}]))))\r\n\r\n(defn get-flat-bonuses\r\n  [conn action-id]\r\n  (ffirst (ds/q '[:find ?penalties\r\n                  :in $ ?action-id\r\n                  :where [?action-id :action/flat-bonus ?penalties]]\r\n        @conn action-id)))\r\n\r\n(defn update-flat-bonuses\r\n  [conn action-id update-fn]\r\n  (let [current-flat-bonus (get-flat-bonuses conn action-id)\r\n        updated-flat-bonus (update-fn current-flat-bonus)]\r\n    (when (<= 0 updated-flat-bonus)\r\n      (reset-splinters conn action-id)\r\n      (reset-combinations conn action-id)\r\n      (ds/transact! conn [{:db/id             action-id\r\n                           :action/flat-bonus updated-flat-bonus}]))))\r\n\r\n(defn get-flat-modifier\r\n  [conn action-id]\r\n  (let [penalties (get-flat-penalties conn action-id)\r\n        bonuses (get-flat-bonuses conn action-id)]\r\n    (- bonuses penalties)))\r\n\r\n(defn update-splinters\r\n  [conn action-id update-fn]\r\n  (let [current-splinters (get-splinters conn action-id)\r\n        updated-splinters (update-fn current-splinters)\r\n        max-splinters     (:quality (get-calculated-action-pool-info conn action-id))]\r\n    (when (<= 1 updated-splinters max-splinters)\r\n      (ds/transact! conn [{:db/id            action-id\r\n                           :action/splinters updated-splinters}])\r\n      (reset-combinations conn action-id))))\r\n\r\n(defn update-combinations\r\n  [conn action-id index update-fn]\r\n  (let [current-combinations (vec (ffirst (ds/q '[:find ?combinations\r\n                                                  :in $ ?action-id\r\n                                                  :where [?action-id :action/combinations ?combinations]]\r\n                                                @conn action-id)))\r\n        dice-pool-to-update (-> (get-calculated-action-pool-info conn action-id)\r\n                                :dice-pools\r\n                                vec\r\n                                (get index))\r\n        min-combination (* -1 (first dice-pool-to-update))\r\n        max-combination (/ (first dice-pool-to-update) 2)\r\n        updated-combination (update-fn (get current-combinations index))]\r\n    (when (<= min-combination updated-combination max-combination)\r\n      (ds/transact! conn [{:db/id action-id\r\n                           :action/combinations (assoc current-combinations index updated-combination)}]))))\r\n\r\n\r\n\r\n(defn divide-evenly [n m]\r\n  (let [q (quot n m)\r\n        r (rem n m)]\r\n    (concat (repeat (- m r) q)\r\n            (repeat r (inc q)))))\r\n\r\n(defn apply-combination [[dice-quantity dice-size dice-mod] combination]\r\n  (if (or (nil? combination)\r\n          (= 0 combination)\r\n          (< dice-quantity (* -1 combination))\r\n          (< (quot dice-quantity 2) combination))\r\n    [[dice-quantity dice-size dice-mod]]\r\n    (if (< 0 combination)\r\n      (let [new-quantities [(- dice-quantity (* 2 combination)) combination]\r\n            new-dice-sizes [dice-size (+ dice-size 2)]\r\n            new-mods [0 dice-mod]]\r\n        (remove nil?\r\n                (map (fn [qty size mod]\r\n                       (when (< 0 qty) (vector qty size mod)))\r\n                     new-quantities new-dice-sizes new-mods)))\r\n      (let [number-of-splits (* -1 combination)\r\n            new-quantities [(- dice-quantity number-of-splits) (* 2 number-of-splits)]\r\n            new-dice-sizes [dice-size (- dice-size 2)]\r\n            new-mods [0 dice-mod]]\r\n        (remove nil?\r\n                (map (fn [qty size mod]\r\n                       (when (< 0 qty) (vector qty size mod)))\r\n                     new-quantities new-dice-sizes new-mods))))))\r\n\r\n(defn format-dice-pool-text\r\n  [pool]\r\n  (interpose \" + \" (map (fn [[quantity size modifier]]\r\n                          (str quantity \"d\" size\r\n                               (cond\r\n                                 (> 0 modifier) (str \" \" modifier)\r\n                                 (= 0 modifier) nil\r\n                                 (< 0 modifier) (str \" +\" modifier)\r\n                                 :else nil)))\r\n                      pool)))\r\n\r\n(defn format-dice-pools-text [pools]\r\n  (map format-dice-pool-text pools))\r\n\r\n(defn format-dice-pool-icons\r\n  [pool]\r\n  (let [total-modifier (apply + (map last pool))]\r\n    (conj\r\n     (mapv (fn [[quantity size _]]\r\n             [:> rn/View (map (fn [dice-size]\r\n                                [:> MaterialCommunityIcons {:key 5 :name (str \"dice-d\" dice-size) :size 24 :color (if (> 0 quantity) :black :white)}])\r\n                              (repeat (abs quantity) size))])\r\n           pool)\r\n     (when (not (= 0 total-modifier))\r\n       (components/default-text\r\n        (cond\r\n          (> 0 total-modifier) (str \" \" total-modifier)\r\n          (< 0 total-modifier) (str \" +\" total-modifier)\r\n          :else nil)\r\n        {:flex nil})))))\r\n\r\n(defn format-dice-pools-icons\r\n  [pools]\r\n  (map format-dice-pool-icons pools))\r\n\r\n(defn calc-quantity-and-size\r\n  [quantity size]\r\n  (let [size-level-diff (- (/ size 2) 2)\r\n        quantity-level-diff (- quantity 1)\r\n        total-diff (+ size-level-diff quantity-level-diff)]\r\n    (if (> 0 total-diff)\r\n      [quantity-level-diff 4]\r\n      (let [new-quantity (max quantity 1)\r\n            new-size (if (> 1 quantity) (- size (* 2 (- 1 quantity))) size)]\r\n        [new-quantity new-size]))))\r\n\r\n(defn get-calculated-action-pool-info\r\n  [conn action-id]\r\n  (let [{:keys [action/skill-domain action/skill\r\n                action/ability-domain action/ability\r\n                action/resources\r\n                action/splinters\r\n                action/combinations]\r\n         :as   action-data} (get-action-data conn action-id)\r\n        ruleset-stat-granularity (:ruleset/stat-granularity (campaign-data/get-campaign-active-ruleset conn))]\r\n    (when (and (integer? skill-domain) (integer? ability-domain))\r\n      (let [skill-domain-data     (ds/pull @conn '[*] skill-domain)\r\n            ability-domain-data   (ds/pull @conn '[*] ability-domain)\r\n            skill-value           (if (= \"domain\" ruleset-stat-granularity)\r\n                                    (rulesets-data/get-simple-domain-skill-value conn skill-domain)\r\n                                    (get skill-domain-data (keyword (str \"domain/\" skill))))\r\n            ability-value         (case ruleset-stat-granularity\r\n                                    \"domain\" (rulesets-data/get-simple-domain-ability-value conn skill-domain)\r\n                                    \"skillbility\" (get skill-domain-data (keyword (str \"domain/\" ability)))\r\n                                    (get ability-domain-data (keyword (str \"domain/\" ability))))\r\n            resource-dice-mod     (apply + (map :resource/quality-value resources))\r\n            resource-flat-mod     (apply + (map :resource/power-value resources))\r\n            dice-mod              (get-dice-modifier conn action-id)\r\n            flat-mod              (get-flat-modifier conn action-id)\r\n            dice-quantity         (+ skill-value resource-dice-mod dice-mod)\r\n            [base-dice-quantity base-dice-size]\r\n            (calc-quantity-and-size dice-quantity ability-value)\r\n            base-dice-mod         (+ flat-mod resource-flat-mod)\r\n            splintered-quantities (divide-evenly base-dice-quantity splinters)\r\n            splintered-mods       (divide-evenly base-dice-mod splinters)\r\n            dice-pools            (map vector splintered-quantities (repeat base-dice-size) splintered-mods)\r\n            combined-dice-pools   (map apply-combination dice-pools combinations)\r\n            formatted-dice-pools  (apply str (interpose \" | \" (map #(apply str %) (format-dice-pools-text combined-dice-pools))))\r\n            formatted-dice-pools-icons (format-dice-pools-icons combined-dice-pools)]\r\n        {:stat-quality skill-value\r\n         :stat-power ability-value\r\n         :resource-dice-mod resource-dice-mod\r\n         :resource-flat-mod resource-flat-mod\r\n         :modifier-dice-mod dice-mod\r\n         :modifier-flat-mod flat-mod\r\n         :quality base-dice-quantity\r\n         :power base-dice-size\r\n         :bonus base-dice-mod\r\n         :splinter-sizes splintered-quantities\r\n         :splinter-bonuses splintered-mods\r\n         :dice-pools dice-pools\r\n         :combined-dice-pools combined-dice-pools\r\n         :formatted-dice-pools formatted-dice-pools\r\n         :formatted-dice-pools-icons formatted-dice-pools-icons}))))\r\n\r\n(defn get-dice-pools\r\n  [conn action-id]\r\n  (:dice-pools (get-calculated-action-pool-info conn action-id)))\r\n\r\n(defn get-combined-dice-pools\r\n  [conn action-id]\r\n  (:combined-dice-pools (get-calculated-action-pool-info conn action-id)))\r\n\r\n(defn get-fully-formatted-roll\r\n  [conn action-id]\r\n  (:formatted-dice-pools (get-calculated-action-pool-info conn action-id)))\r\n\r\n\r\n(defn roll-dice-pool\r\n  [pool]\r\n  (let [rolls (map (fn [[quantity size _]]\r\n                     (let [rolls (take quantity (repeatedly #(inc (rand-int size))))]\r\n                       {:rolls rolls\r\n                        :highest (apply max rolls)}))\r\n                   pool)\r\n        all-rolls (flatten (map :highest rolls))\r\n        bonus (apply max (map last pool))\r\n        final-result (+ (apply max all-rolls) bonus)]\r\n    {:rolls rolls\r\n     :bonus bonus\r\n     :result final-result}))\r\n"]}