{"version":3,"sources":["organisms/atoms/text_input.cljs"],"mappings":";AAKA,AAAKA,4CAAe,gDAAA,hDAACC;AAErB,AAAKC,kDAAqB,gDAAA,hDAACD;AAE3B,AAAA,gDAAA,wDAAAE,xGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8EAAA,9EAAMD,yFACFE,MAAMC;AADV,AAEG,6FAAA,tFAACC,4EAAmBF,MAAMC;;;AAF7B,CAAA,8EAAA,9EAAMH,yFAGFE,MAAMC,IAAIE;AAHd,AAIG,IAAMC,aAAW,4CAAA,AAAAC,5CAACC,4DAAKb,2CAAeQ;IAChCM,QAAM,4CAAA,AAAAF,5CAACC,4DAAKX,iDAAqBM;AADvC,AAAA,0FAAA,uFAAA,2CAAA,uDAAA,2CAAA,wEAAA,mDAAA,iDAAA,2iBAAA,mFAAA,4FAAA,2CAAA,iEAAA,uDAAA,2CAAA,mMAAA,0DAAA,sDAAA,uDAAA,eAAA,4EAAA,9sDAEMO,qXACH,sCAAA,mFAAA,uFAAA,2CAAA,uDAAA,2CAAA,uDAAA,lZAAI,AAACC,sBAAMT,QACTA,wIACIU,mTAAiC,4CAAKV,kJACxCW,8IAA8BP,oKACU,AAAA,iGAAA,AAAAC,gBAAeO,yRAGzBX,4EACA,WAAKY;AAAL,AACE,AAACC,mDAAMnB,gDAAqB,WAAKoB;AAAL,AACE,OAACC,8CAAMD,UAAUd,IAAI,AAACgB,cAAI,CAACd,sCAAAA,4CAAAA,RAAMU,wBAAAA;;;AAC/D,OAACC,mDAAMrB,0CAAe,WAAKyB;AAAL,AACE,OAACF,8CAAME,eAAejB,IAAIY;;mBACtF,yBAAA,AAAA,mFAAA,uFAAA,2CAAA,uDAAA,2CAAA,uDAAA,mEAAA,wBAAA,hdAAMN,yIACAG;;;AArBZ,CAAA,wEAAA,xEAAMZ;;AAAN","names":["organisms.atoms.text-input/text-input-map","reagent.core.atom","organisms.atoms.text-input/text-input-error-map","var_args","G__34712","organisms.atoms.text-input/default-text-input","js/Error","label","key","organisms.atoms.text_input.default_text_input","preds","text-input","cljs.core/deref","cljs.core.get","error","js/shadow.js.shim.module$react_native.View","cljs.core/coll?","js/shadow.js.shim.module$react_native.Text","js/shadow.js.shim.module$react_native.TextInput","organisms.config/palette","text","cljs.core.swap_BANG_","error-map","cljs.core.assoc","cljs.core/not","text-input-map"],"sourcesContent":["(ns organisms.atoms.text-input\r\n  (:require [reagent.core :as r]\r\n            [\"react-native\" :as rn]\r\n            [organisms.config :refer [palette]]))\r\n\r\n(def text-input-map (r/atom {}))\r\n\r\n(def text-input-error-map (r/atom {}))\r\n\r\n(defn default-text-input\r\n  ([label key]\r\n   (default-text-input label key nil))\r\n  ([label key preds]\r\n   (let [text-input (get @text-input-map key)\r\n         error (get @text-input-error-map key)]\r\n     [:> rn/View {:style {:flex-direction :row :gap 5}}\r\n      (if (coll? label)\r\n        label\r\n        [:> rn/Text {:style {:color :white}} (str label)])\r\n      [:> rn/TextInput {:value          text-input\r\n                        :style          {:color   (:surface-700 @palette)\r\n                                         :display :flex\r\n                                         :width   \"100%\"}\r\n                        :enter-key-hint key\r\n                        :on-change-text (fn [text]\r\n                                          (swap! text-input-error-map (fn [error-map]\r\n                                                                        (assoc error-map key (not (preds text)))))\r\n                                          (swap! text-input-map (fn [text-input-map]\r\n                                                                  (assoc text-input-map key text))))}]\r\n      (when error\r\n        [:> rn/Text {:style {:color :red}}\r\n         \"invalid input\"])])))\r\n"]}