{"version":3,"sources":["organisms/molecules/lists.cljs"],"mappings":"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","names":["organisms.molecules.lists/sort-manager","reagent.core.atom","organisms.molecules.lists/simplify-sort-order","sort-manager","sorts-in-order","cljs.core/deref","cljs.core.sort_by","sort-value","cljs.core/last","cljs.core/reset!","cljs.core.into","cljs.core.map_indexed","p__34661","vec__34662","cljs.core.nth","idx","k","v","cljs.core.assoc","organisms.molecules.lists/toggle-sort-manager","header-key","G__34672","cljs.core._EQ_","js/Error","cljs.core.get_in","p1__34668#","cljs.core.swap_BANG_","cljs.core/count","p1__34670#","cljs.core/assoc-in","p1__34671#","cljs.core.dissoc","organisms.molecules.lists/section-separator","js/shadow.js.shim.module$react_native.View","organisms.config/palette","organisms.molecules.lists/item-separator","reagent.core.as_element","p__34688","map__34689","cljs.core/--destructure-map","cljs.core.get","organisms.molecules.lists/SectionList","items","headers","flex-vals","item-format-fn","js/shadow.js.shim.module$react_native.SectionList","cljs.core/clj->js","cljs.core/not-empty","ordered-sort-list","column-sort-list","cljs.core.mapv","p__34692","vec__34693","p1__34682#","sort-criteria","cljs.core/<","cljs.core/>","section","cljs.core.update","section-data","p1__34684#","p2__34683#","cljs.core.reduce","cljs.core/reverse","clj-section","clojure.walk/keywordize-keys","cljs.core.js__GT_clj","clj-section-title","organisms.atoms.text.default_text","cljs.core.map","p__34701","vec__34704","header-data","flex","js/shadow.js.shim.module$react_native.Pressable","organisms.atoms.text/default-text","map__34708","asc?","order","G__34709","js/shadow.js.shim.module$$expo$vector_icons.FontAwesome5","js-item","clj-item","G__34710","p__34725","map__34726","organisms.molecules.lists/FlatList","js/shadow.js.shim.module$react_native.FlatList","p__34732","vec__34733","p1__34715#","p1__34720#","p2__34716#","p__34736","vec__34738","header-toggle-val","G__34741","G__34748","js/shadow.js.shim.module$react_native.Text"],"sourcesContent":["(ns organisms.molecules.lists\r\n  (:require [reagent.core :as r]\r\n            [\"react-native\" :as rn]\r\n            [\"@expo/vector-icons\" :refer [FontAwesome5]]\r\n            [organisms.config :refer [palette]]\r\n            [organisms.atoms.text :as text]))\r\n\r\n(def sort-manager\r\n  (r/atom {}))\r\n\r\n(defn simplify-sort-order\r\n  [sort-manager]\r\n  (let [sorts-in-order (sort-by (fn [sort-value]\r\n                                  (:order (last sort-value)))\r\n                                @sort-manager)]\r\n    (reset! sort-manager\r\n            (into {}\r\n                  (map-indexed (fn [idx [k v]] [k (assoc v :order (inc idx))]) sorts-in-order)))))\r\n\r\n(defn toggle-sort-manager\r\n  [sort-manager header-key]\r\n  (case (get-in @sort-manager [header-key :asc?])\r\n    nil (swap! sort-manager #(assoc % header-key {:asc? true :order (inc (count @sort-manager))}))\r\n    true (swap! sort-manager #(assoc-in % [header-key :asc?] false))\r\n    false (do (swap! sort-manager #(dissoc % header-key))\r\n              (simplify-sort-order sort-manager))))\r\n\r\n(defn section-separator\r\n  []\r\n  [:> rn/View {:style {:height           2\r\n                       :width            \"90%\"\r\n                       :background-color (:surface-700 @palette)\r\n                       :align-self       :center}}])\r\n\r\n(defn item-separator\r\n  []\r\n  (fn []\r\n    (r/as-element [:> rn/View {:style {:height           1\r\n                                       :width            \"80%\"\r\n                                       :background-color (:surface-700 @palette)\r\n                                       :align-self       :center}}])))\r\n\r\n(defn SectionList\r\n  [{:keys [items headers flex-vals item-format-fn sort-manager]}]\r\n  [:> rn/SectionList\r\n   {:sections\r\n    (clj->js (if (not-empty @sort-manager)\r\n               (let [ordered-sort-list (sort-by (fn [sort-value]\r\n                                                  (:order (last sort-value)))\r\n                                                @sort-manager)\r\n                     column-sort-list (mapv (fn [[k v]]\r\n                                              (let [sort-criteria (get-in headers [k :sort-fn])]\r\n                                                #(sort-by sort-criteria (if (:asc? v) < >) %)))\r\n                                            ordered-sort-list)]\r\n                 (mapv (fn [section]\r\n                         (update section\r\n                                 :data\r\n                                 (fn [section-data]\r\n                                   (reduce #(%2 %1) section-data (reverse column-sort-list)))))\r\n                       items))\r\n               items))\r\n\r\n    :render-section-header\r\n    (fn [section]\r\n      (let [clj-section       (clojure.walk/keywordize-keys (js->clj section))\r\n            clj-section-title (-> clj-section :section :title)]\r\n        (r/as-element\r\n         [:> rn/View {:style {:background-color (:surface-100 @palette)}}\r\n          (text/default-text clj-section-title\r\n                             {:font-size  20\r\n                              :padding    10})\r\n          [:> rn/View {:style {:flex-direction :row :background-color (:surface-100 @palette)}}\r\n           (map (fn [[header-key header-data] flex]\r\n                  [:> rn/Pressable {:style {:flex flex :flex-direction :row :padding-left 15 :padding-right 15}\r\n                                    :on-press #(toggle-sort-manager sort-manager header-key)}\r\n                   (text/default-text (:header header-data))\r\n                   (let [{:keys [asc? order]} (get @sort-manager header-key)]\r\n                     (case asc?\r\n                       true [:> rn/View\r\n                             [:> FontAwesome5 {:name :chevron-up :color (:surface-700 @palette) :size \"50%\"}]\r\n                             (text/default-text order {:size \"30%\"})]\r\n                       false [:> rn/View\r\n                              [:> FontAwesome5 {:name :chevron-down :color (:surface-700 @palette) :size \"50%\"}]\r\n                              (text/default-text order {:size \"30%\"})]\r\n                       nil))])\r\n                headers\r\n                flex-vals)]\r\n          (section-separator)])))\r\n\r\n    :render-item\r\n    (fn [js-item]\r\n      (let [clj-item (js->clj (.-item js-item))]\r\n        (r/as-element (item-format-fn (clojure.walk/keywordize-keys clj-item)))))\r\n\r\n    #_:SectionSeparatorComponent\r\n    #_(fn []\r\n        (r/as-element [:> rn/View {:style {:height           2\r\n                                           :width            \"90%\"\r\n                                           :background-color :white\r\n                                           :align-self       :center}}]))\r\n\r\n    :ItemSeparatorComponent\r\n    (item-separator)\r\n\r\n    :key-extractor\r\n    (fn [js-item]\r\n      (let [clj-item (clojure.walk/keywordize-keys (js->clj js-item))]\r\n        (:id clj-item)))\r\n\r\n    :listEmptyComponent\r\n    (fn []\r\n      (r/as-element (text/default-text \"No Items\")))\r\n\r\n    :sticky-section-headers-enabled\r\n    true}])\r\n\r\n\r\n\r\n\r\n(defn FlatList\r\n  [{:keys [items headers flex-vals item-format-fn]}]\r\n  [:> rn/FlatList\r\n   {:data\r\n    (clj->js (if (not-empty @sort-manager)\r\n               (let [ordered-sort-list (sort-by (fn [sort-value]\r\n                                                  (:order (last sort-value)))\r\n                                                @sort-manager)\r\n                     column-sort-list (mapv (fn [[k v]]\r\n                                             (let [sort-criteria (get-in headers [k :sort-fn])]\r\n                                               #(sort-by sort-criteria (if (:asc? v) < >) %)))\r\n                                           ordered-sort-list)]\r\n                 (reduce #(%2 %1) items column-sort-list))\r\n               items))\r\n\r\n    :ListHeaderComponent\r\n    (fn []\r\n      (r/as-element\r\n       [:> rn/View {:style {:flex-direction :row :background-color (:surface-100 @palette)}}\r\n        (map (fn [[header-key header-data] flex]\r\n               [:> rn/Pressable {:style {:flex flex}\r\n                                 :on-press #(toggle-sort-manager sort-manager header-key)}\r\n                (text/default-text (:header header-data))\r\n                (let [header-toggle-val (:asc? (get @sort-manager header-key))]\r\n                  (case header-toggle-val\r\n                    true [:> FontAwesome5 {:name :chevron-up :color (:surface-700 @palette) :size 10}]\r\n                    false [:> FontAwesome5 {:name :chevron-down :color (:surface-700 @palette) :size 10}]\r\n                    nil))])\r\n             headers\r\n             flex-vals)]))\r\n\r\n    :render-item\r\n    (fn [js-item]\r\n      (let [clj-item (js->clj (.-item js-item))]\r\n        (r/as-element (item-format-fn (clojure.walk/keywordize-keys clj-item)))))\r\n\r\n    :ItemSeparatorComponent\r\n    (item-separator)\r\n\r\n    :key-extractor\r\n    (fn [js-item]\r\n      (let [clj-item (clojure.walk/keywordize-keys (js->clj js-item))]\r\n        (:id clj-item)))\r\n\r\n    :ListEmptyComponent\r\n    (fn []\r\n      (r/as-element [:> rn/Text {:style {:color (:surface-700 @palette)}} \"No Items\"]))}])\r\n"]}