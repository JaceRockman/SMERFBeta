{"version":3,"sources":["init.cljc"],"mappings":"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","names":["init/initialize-db","conn","_","datascript.core.transact_BANG_","entities.realms.data.interface/example-realms","entities.creatures.data.interface/creature-races","entities.rulesets.data.interface/default-domains","entities.rulesets.data.interface/example-rulesets","entities.actions.data.interface/example-actions","entities.resources.data.interface/resource-properties","G__39615","entities.resources.data.interface/example-resources","cljs.core/vec","cljs.core.map","cljs.core/first","G__39616","G__39617","cljs.core/deref","datascript.core/q","init-domain-entities","G__39618","G__39619","init-resources","cljs.core.take","G__39620","G__39621","creature-resources","cljs.core.mapv","resource-id","init-creature-resources","G__39622","G__39623","cljs.core.println","G__39624","G__39625","init-actions","G__39626","G__39627","entities.creatures.data.interface/example-creatures","G__39628","G__39629","G__39630","G__39631","G__39632","G__39633","G__39634","entities.campaigns.data.interface/init-campaigns","G__39635","G__39636","G__39637","G__39638","G__39642","G__39643","G__39647","G__39648","G__39652","G__39653"],"sourcesContent":["(ns init\r\n  (:require [clojure.string :as str]\r\n            [clojure.walk :as walk]\r\n            [\"react-native\" :as rn]\r\n            [datascript.core :as ds]\r\n            [datascript.impl.entity :as de]\r\n            [entities.campaigns.data.interface :as campaign-data]\r\n            [entities.realms.data.interface :as realm-data]\r\n            [entities.rulesets.data.interface :as ruleset-data]\r\n            [entities.creatures.data.interface :as creature-data]\r\n            [entities.resources.data.interface :as resource-data]\r\n            [entities.actions.data.interface :as action-data]))\r\n\r\n(defn initialize-db\r\n  [conn]\r\n  (let [_ (ds/transact! conn [[:db/add 1 :navigator/history '(\"campaigns\")]\r\n                              ;; [:db/add 1 :navigator/sub :none]\r\n                              ])\r\n        _ (ds/transact! conn realm-data/example-realms)\r\n        _ (ds/transact! conn creature-data/creature-races)\r\n        _ (ds/transact! conn ruleset-data/default-domains)\r\n        _ (ds/transact! conn ruleset-data/example-rulesets)\r\n        _ (ds/transact! conn action-data/example-actions)\r\n        _ (ds/transact! conn resource-data/resource-properties)\r\n        _ (ds/transact! conn (resource-data/example-resources (vec (map first (ds/q '[:find ?e\r\n                                                                                      :where [?e :entity-type \"action\"]]\r\n                                                                                    @conn)))))\r\n        init-domain-entities (map first (ds/q '[:find ?e\r\n                                                :where [?e :entity-type \"domain\"]]\r\n                                              @conn))\r\n        init-resources (map first (take 8 (ds/q '[:find ?e\r\n                                                  :where [?e :entity-type \"resource\"]]\r\n                                                @conn)))\r\n        creature-resources (mapv (fn [resource-id] {:entity-type \"creature-resource\"\r\n                                                    :creature-resource/resource resource-id\r\n                                                    :creature-resource/quantity 1})\r\n                                 init-resources)\r\n        _ (ds/transact! conn creature-resources)\r\n        init-creature-resources (map first (take 8 (ds/q '[:find ?e\r\n                                                           :where [?e :entity-type \"creature-resource\"]]\r\n                                                         @conn)))\r\n        _ (println (ds/q '[:find ?e\r\n                           :where [?e :resource/quality-value 3]]\r\n                         @conn))\r\n        ;; _ (println (ds/pull-many @conn '[*] init-creature-resources))\r\n        init-actions (map first (ds/q '[:find ?e\r\n                                        :where [?e :entity-type \"action\"]]\r\n                                      @conn))\r\n        _ (ds/transact! conn (creature-data/example-creatures init-domain-entities init-creature-resources init-actions))\r\n        _ (println (ds/q '[:find ?e\r\n                           :where [?e :entity-type \"creature\"]]\r\n                         @conn))\r\n        _ (ds/transact! conn (campaign-data/init-campaigns (vec (map first (ds/q '[:find ?e\r\n                                                                                   :where [?e :entity-type \"realm\"]]\r\n                                                                                 @conn)))\r\n                                                           (vec (map first (ds/q '[:find ?e\r\n                                                                                   :where [?e :entity-type \"ruleset\"]]\r\n                                                                                 @conn)))\r\n                                                           (vec (map first (ds/q '[:find ?e\r\n                                                                                   :where [?e :entity-type \"creature\"]]\r\n                                                                                 @conn)))\r\n                                                           (vec (map first (ds/q '[:find ?e\r\n                                                                                   :where [?e :entity-type \"domain\"]]\r\n                                                                                 @conn)))\r\n                                                           (vec (map first (ds/q '[:find ?e\r\n                                                                                   :where [?e :entity-type \"resource\"]]\r\n                                                                                 @conn)))))]\r\n    :success))\r\n"]}