{"version":3,"sources":["systems/navigation.cljc"],"mappings":";AAMA,qCAAA,rCAAMA,kFACHC;AADH,AAEE,IAAMC,SAAO,AAACC,iBAAO,iBAAAC,WAAA,AAAA;IAAAC,WAAA,AAAAC,gBAEOL;AAFP,AAAA,0GAAAG,SAAAC,wCAAAD,SAAAC,5JAACE,kDAAAA,qEAAAA;;AAAtB,AAGEL;;AAEJ,wCAAA,xCAAMM,wFACHP;AADH,AAEE,OAACQ,gDAAQ,AAACC,gBAAM,6GAAA,7GAACC,mDAAU,AAACD,gBAAM,AAACV,mCAAgBC;;AAErD,6CAAA,7CAAMW,kGACHX;AADH,AAEE,oHAAA,7GAACU,mDAAU,AAACD,gBAAM,AAACV,mCAAgBC;;AAErC,iDAAA,jDAAMY,0GACHZ;AADH,AAEE,IAAMa,oBAAkB,AAACC,eAAK,AAACH,2CAAwBX;AAAvD,AACE,OAACe,0BAAe,kBAAI,qBAAA,rBAACC,2BAAkBH,oBACrB,AAACX,iBAAO,iBAAAe,WAAA,AAAA;IAAAC,WAAA,AAAAb,gBAGOL;IAHPmB,WAGY,qBAAA,pBAAKN;AAHjB,AAAA,0GAAAI,SAAAC,SAAAC,wCAAAF,SAAAC,SAAAC,9KAACb,kDAAAA,8EAAAA;MAITO;;AAEtB,sCAAA,tCAAMO;AAAN,AAEE,uFAAA,vFAACC,sBAAOC;;AACR,iFAAA,jFAACD,sBAAOE;;AACR,gGAAA,hGAACF,sBAAOG;;AACR,wGAAA,jGAACH,sBAAOI;;AAEV,oCAAA,pCAAMC,gFACH1B,KAAK2B;AADR,AAEE,AAACP;;AACD,IAAMQ,MAAI,EAAI,AAACC,sBAAMF,cACT,AAACG,8CAAMC,cAAI,kDAAA,lDAACC,sDAAcL,cAC1B,AAACM,eAAKN;IACZO,cAAQ,AAACnC,mCAAgBC;AAH/B,AAIE,GAAM,GAAK,AAACmC,6CAAE,AAAC1B,gBAAMyB,aAASN;AAA9B,AACE,yEAAA,mFAAA,mFAAA,qDAAA,IAAA,jSAACQ,6DAAapC,+SAAoC,AAACqC,6CAAKH,YAAQN;;AADlE;;;AAGJ,iCAAA,jCAAMU,0EACHtC,KAAKuC;AADR,AAEE,IAAMC,aAAW,AAACP,eAAK,AAAC1B,sCAAmBP;gBAA3C,ZACMyC,+FAAWD,WAAWD;AAD5B,AAEE,OAACb,kCAAU1B,KAAKyC;;AAEpB,oCAAA,pCAAMC,gFACH1C,KAAK2C;AADR,AAEE,IAAMH,aAAW,AAAC7B,2CAAwBX;IACpCyC,YAAU,yDAAA,zDAACG,8CAAMJ,eAAaG;AADpC,AAEE,OAACjB,kCAAU1B,KAAKyC;;AAEpB,8BAAA,9BAAMI,oEACH7C;AADH,AAEE,IAAMkC,cAAQ,AAACnC,mCAAgBC;IACzB8C,kBAAgB,EAAI,CAAA,MAAK,AAACC,gBAAMb,eAClB,AAACc,eAAKd,aACNA;AAHpB,AAIE,yEAAA,mFAAA,mFAAA,qDAAA,IAAA,jSAACE,6DAAapC,+SAAoC8C;;AAEtD,6BAAA,7BAAMG,kEACHjD;AADH,AAEE,IAAMkD,iBAAe,AAACvC,2CAAwBX;IACxCmD,wBAAsB,qFAAA,nFAAI,6CAAA,7CAAChB,iDAAI,AAACY,gBAAMG,8BAEd,AAACE,kBAAQF;AAHvC,AAIE,OAACxB,kCAAU1B,KAAKmD;;AAEpB,uCAAA,vCAAME,sFACHrD;AADH,AAEE,IAAMsD,UAAQ,iBAAAC,WAAA,AAAA;IAAAC,WAAA,AAAAnD,gBAEOL;AAFP,AAAA,0GAAAuD,SAAAC,wCAAAD,SAAAC,5JAAClD,kDAAAA,qEAAAA;;AAAf,AAGE,oBAAM,AAACmD,oBAAUH;AAAjB,AACE,IAAAI,WAAA,AAAArD,gBAAUL;IAAV2D,WAAA,AAAA;IAAAC,WACS,AAAC1D,iBAAOoD;AADjB,AAAA,gHAAAI,SAAAC,SAAAC,2CAAAF,SAAAC,SAAAC,vLAACC,qDAAAA,iFAAAA;;AADH;;;AAIJ,uCAAA,vCAAMC,sFACH9D,KAAKsD;AADR,AAEE,yGAAA,zGAACS,oIAAmCT;;AACpC,IAAMU,mBAAiB,AAAA,mFAAQ,AAACX,qCAAkBrD;AAAlD,AACE,yEAAA,lEAACoC,6DAAapC,wFAAM,oCAAA,2CAAA,sEAAA,oFAAA,2CAAA,lQAAIgE,kHACMA,qFACQV,+HACAA;;AAE1C,yCAAA,zCAAMW,0FACHjE;AADH,AAEE,yEAAA,mFAAA,mFAAA,xOAACoC,6DAAapC,4PAA4B,AAAA,mFAAQ,AAACqD,qCAAkBrD","names":["systems.navigation/get-nav-history","conn","result","cljs.core/ffirst","G__39240","G__39241","cljs.core/deref","datascript.core/q","systems.navigation/get-main-nav-state","cljs.core.keyword","cljs.core/first","clojure.string.split","systems.navigation/get-main-nav-state-list","systems.navigation/get-current-nav-state-title","current-nav-state","cljs.core/last","clojure.string/capitalize","cljs.core/re-matches","G__39242","G__39243","G__39244","systems.navigation/reset-temp-state","cljs.core/reset!","organisms.compounds.search-filter-sort-list/external-search-text","organisms.compounds.search-filter-sort-list/collapse-state","organisms.molecules.scroll-position-indicator/ruleset-horizontal-position","organisms.molecules.scroll-position-indicator/creature-horizontal-position","systems.navigation/navigate!","keyword-url","url","cljs.core/coll?","cljs.core.apply","cljs.core/str","cljs.core.interpose","cljs.core/name","history","cljs.core._EQ_","datascript.core.transact_BANG_","cljs.core.conj","systems.navigation/subnavigate","subsection","main-state","new-state","systems.navigation/subsubnavigate","subsubsection","cljs.core.assoc","systems.navigation/nav-back","updated-history","cljs.core/count","cljs.core/rest","systems.navigation/nav-out","nav-state-list","navigation-collection","cljs.core/butlast","systems.navigation/get-modal-content","content","G__39245","G__39246","cljs.core/not-empty","G__39247","G__39248","G__39249","datascript.core/pull","systems.navigation/set-modal-content","cljs.core.println","modal-content-id","systems.navigation/clear-modal-content"],"sourcesContent":["(ns systems.navigation\r\n  (:require [clojure.string :as str]\r\n            [datascript.core :as ds]\r\n            [organisms.compounds.search-filter-sort-list :refer [external-search-text collapse-state]]\r\n            [organisms.molecules.scroll-position-indicator :refer [ruleset-horizontal-position creature-horizontal-position]]))\r\n\r\n(defn get-nav-history\r\n  [conn]\r\n  (let [result (ffirst (ds/q '[:find ?history\r\n                               :where [1 :navigator/history ?history]]\r\n                             @conn))]\r\n    result))\r\n\r\n(defn get-main-nav-state\r\n  [conn]\r\n  (keyword (first (str/split (first (get-nav-history conn)) #\"/\"))))\r\n\r\n(defn get-main-nav-state-list\r\n  [conn]\r\n  (str/split (first (get-nav-history conn)) #\"/\"))\r\n\r\n(defn get-current-nav-state-title\r\n  [conn]\r\n  (let [current-nav-state (last (get-main-nav-state-list conn))]\r\n    (str/capitalize (if (re-matches #\"\\d+\" current-nav-state)\r\n                      (ffirst (ds/q '[:find ?title\r\n                                      :in $ ?eid\r\n                                      :where [?eid :title ?title]]\r\n                                    @conn (int current-nav-state)))\r\n                      current-nav-state))))\r\n\r\n(defn reset-temp-state\r\n  []\r\n  (reset! external-search-text {})\r\n  (reset! collapse-state {})\r\n  (reset! ruleset-horizontal-position 0)\r\n  (reset! creature-horizontal-position 0))\r\n\r\n(defn navigate!\r\n  [conn keyword-url]\r\n  (reset-temp-state)\r\n  (let [url (if (coll? keyword-url)\r\n              (apply str (interpose \"/\" keyword-url))\r\n              (name keyword-url))\r\n        history (get-nav-history conn)]\r\n    (when (not (= (first history) url))\r\n      (ds/transact! conn [[:db/add 1 :navigator/history (conj history url)]]))))\r\n\r\n(defn subnavigate\r\n  [conn subsection]\r\n  (let [main-state (name (get-main-nav-state conn))\r\n        new-state [main-state subsection]]\r\n    (navigate! conn new-state)))\r\n\r\n(defn subsubnavigate\r\n  [conn subsubsection]\r\n  (let [main-state (get-main-nav-state-list conn)\r\n        new-state (assoc main-state 2 subsubsection)]\r\n    (navigate! conn new-state)))\r\n\r\n(defn nav-back\r\n  [conn]\r\n  (let [history (get-nav-history conn)\r\n        updated-history (if (< 1 (count history))\r\n                      (rest history)\r\n                      history)]\r\n    (ds/transact! conn [[:db/add 1 :navigator/history updated-history]])))\r\n\r\n(defn nav-out\r\n  [conn]\r\n  (let [nav-state-list (get-main-nav-state-list conn)\r\n        navigation-collection (if (= 1 (count nav-state-list))\r\n                                \"campaigns\"\r\n                                (butlast nav-state-list))]\r\n    (navigate! conn navigation-collection)))\r\n\r\n(defn get-modal-content\r\n  [conn]\r\n  (let [content (ds/q '[:find ?e ?content\r\n                           :where [?e :modal/content ?content]]\r\n                      @conn)]\r\n    (when (not-empty content)\r\n      (ds/pull @conn '[*]\r\n               (ffirst content)))))\r\n\r\n(defn set-modal-content\r\n  [conn content]\r\n  (println \"setting modal content to\" content)\r\n  (let [modal-content-id (:db/id (get-modal-content conn))]\r\n    (ds/transact! conn [(if modal-content-id\r\n                          {:db/id modal-content-id\r\n                           :modal/content content}\r\n                          {:modal/content content})])))\r\n\r\n(defn clear-modal-content\r\n  [conn]\r\n  (ds/transact! conn [[:db.fn/retractEntity (:db/id (get-modal-content conn))]]))\r\n"]}