{"version":3,"sources":["entities/realms/views.cljs"],"mappings":"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","names":["entities.realms.views/realm-select","conn","realms","cljs.core.println","flex-vals","G__39443","G__39444","organisms.library/search-filter-sort-list","realm-data","js/shadow.js.shim.module$react_native.Pressable","G__39447","G__39448","entities.realms.data.interface/set-active-realm","G__39454","G__39455","organisms.library/default-text","cljs.core.nth","G__39458","G__39459","entities.realms.views/subrealm-sort","realm-entities","entity-type-groups","cljs.core/group-by","cljs.core.mapv","p__39463","vec__39464","entity-type","entity-data-list","clojure.string/capitalize","entities.realms.views/set-active-subrealm","cljs.core._EQ_","G__39472","G__39473","G__39474","G__39475","entities.realms.data.interface/set-active-subrealm","entities.realms.views/subrealm-entity-row","realm-entity","G__39480","G__39481","G__39482","G__39483","var_args","G__39489","entities.realms.views/subrealm-select","js/Error","p__39490","map__39491","cljs.core/--destructure-map","cljs.core.get","subrealm-data","entities.realms.views.subrealm_select","list-overrides","js/shadow.js.shim.module$react_native.View","G__39492","G__39493","G__39494","p1__39484#","cljs.core.merge","entities.realms.views/realm-details","js/shadow.js.shim.module$react_native.ScrollView","G__39499","G__39500","organisms.library/default-realm-markdown","parents","G__39501","G__39502","entities.realms.data.interface/get-realm-entity-parents","children","G__39503","G__39504","entities.realms.data.interface/get-realm-entity-children","cljs.core/empty?","entities.realms.views/realm-home","active-campaign-data","entities.campaigns.data.interface/get-active-campaign","active-realm-data","entities.realms.data.interface/get-active-realm","active-subrealm-data","entities.realms.data.interface/get-active-subrealm","subrealms","G__39508","G__39509","entities.campaigns.data.interface/get-active-campaign-realms","entities.realms.data.interface/get-all-realms","entities.realms.views/realm","props","organisms.library/view-frame"],"sourcesContent":["(ns entities.realms.views\r\n  (:require [clojure.string :as str]\r\n            [\"react-native\" :as rn]\r\n            [reagent.core :as r]\r\n            [\"@expo/vector-icons\" :refer [FontAwesome5]]\r\n            [nextjournal.markdown.parser :as md.parser]\r\n            [nextjournal.markdown.transform :as md.transform]\r\n            [systems.navigation :as navigation]\r\n            [entities.campaigns.data.interface :as campaign-data]\r\n            [entities.realms.data.interface :as realm-data]\r\n            [organisms.library :as components]))\r\n\r\n\r\n\r\n(defn realm-select\r\n  [conn realms]\r\n  (println \"realm-select\")\r\n  (let [flex-vals [1 1]]\r\n    (components/search-filter-sort-list\r\n     {:list-header \"Realms\"\r\n      :column-flex-vals flex-vals\r\n      :column-headers [\"Title\" \"Owner\"]\r\n      :items realms\r\n      :item-format-fn (fn [realm-data]\r\n                        [:> rn/Pressable {:style {:flex-direction :row}\r\n                                          :on-press (fn [] (realm-data/set-active-realm\r\n                                                            conn\r\n                                                            (:id realm-data)))}\r\n                         (components/default-text (:title realm-data) {:flex (nth flex-vals 0)})\r\n                         (components/default-text \"Avis Industries\" {:flex (nth flex-vals 1)})])}\r\n     \"realms\")))\r\n\r\n(defn subrealm-sort\r\n  [realm-entities]\r\n  (let [entity-type-groups (group-by :entity-type realm-entities)]\r\n    (mapv (fn [[entity-type entity-data-list]]\r\n            {:title (str/capitalize entity-type) :data entity-data-list})\r\n          entity-type-groups)))\r\n\r\n(defn set-active-subrealm\r\n  [conn realm-data]\r\n  (fn []\r\n    (if (= \"realm\" (:entity-type realm-data))\r\n      (realm-data/set-active-realm\r\n       conn\r\n       (:id realm-data))\r\n      (realm-data/set-active-subrealm\r\n       conn\r\n       (:id realm-data)))))\r\n\r\n(defn subrealm-entity-row\r\n  [conn flex-vals realm-entity]\r\n  [:> rn/Pressable {:style    {:flex-direction :row}\r\n                    :on-press (set-active-subrealm conn realm-entity)}\r\n   (components/default-text (:title realm-entity)\r\n                            {:flex (nth flex-vals 0)})\r\n   (components/default-text \"System\"\r\n                            {:flex (nth flex-vals 0)})])\r\n\r\n(defn subrealm-select\r\n  ([conn subrealm-data]\r\n   (subrealm-select conn subrealm-data {}))\r\n  ([conn subrealm-data {:keys [realm-data list-overrides]}]\r\n   (let [flex-vals [2 1]]\r\n     [:> rn/View\r\n      (when realm-data (components/default-text (:realm/entity-details realm-data)))\r\n      (components/search-filter-sort-list\r\n       (merge\r\n        {:list-header \"Realms\"\r\n         :column-flex-vals flex-vals\r\n         :column-headers [\"Title\" \"Author\"]\r\n         :items (subrealm-sort subrealm-data)\r\n         :item-format-fn #(subrealm-entity-row conn flex-vals %)}\r\n        list-overrides)\r\n       (str (:title subrealm-data) (:list-header list-overrides)))])))\r\n\r\n\r\n\r\n(defn realm-details\r\n  [conn subrealm-data]\r\n  [:> rn/ScrollView {:style {:height \"100%\"}}\r\n   (components/default-realm-markdown conn (:realm/entity-details subrealm-data))\r\n   (let [parents (realm-data/get-realm-entity-parents conn (:db/id subrealm-data))\r\n         children (realm-data/get-realm-entity-children conn (:db/id subrealm-data))]\r\n     [:> rn/View\r\n      [:> rn/View\r\n       (when-not (empty? parents)\r\n        (subrealm-select conn parents {:list-overrides {:list-header \"Parents\"\r\n                                                        :collapsed? true}}))]\r\n      [:> rn/View\r\n       (when-not (empty? children)\r\n        (subrealm-select conn children {:list-overrides {:list-header \"Children\"\r\n                                                         :collapsed? true}}))]])])\r\n\r\n(defn realm-home [conn]\r\n  (let [active-campaign-data (campaign-data/get-active-campaign conn)\r\n        active-realm-data (realm-data/get-active-realm conn)\r\n        active-subrealm-data (realm-data/get-active-subrealm conn)]\r\n    (cond\r\n      active-subrealm-data (realm-details conn active-subrealm-data)\r\n      active-realm-data (let [subrealms (realm-data/get-realm-entity-children conn (:db/id active-realm-data))]\r\n                          (subrealm-select conn subrealms {:realm-data active-realm-data}))\r\n      active-campaign-data (realm-select conn (campaign-data/get-active-campaign-realms conn))\r\n      :else (realm-select conn (realm-data/get-all-realms conn)))))\r\n\r\n(defn realm [conn ^js props]\r\n  (components/view-frame conn (realm-home conn) \"realms-page\"))\r\n"]}