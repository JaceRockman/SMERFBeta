{"version":3,"sources":["entities/resources/views.cljs"],"mappings":"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","names":["entities.resources.views/resource-flex-vals","creature?","entities.resources.views/resource-search-text","reagent.core.atom","entities.resources.views/resource-list-search-bar","search-text-map-key","organisms.library/search-bar","entities.resources.views/resource-search-fn","resources","component-key","p1__39750#","cljs.core.filter","clojure.string/includes?","clojure.string/lower-case","cljs.core.apply","cljs.core/str","cljs.core/vals","temp__5802__auto__","search-text-atom","cljs.core/deref","cljs.core.get","entities.resources.views/resource-type-filters-list","entities.resources.views/active-resource-filter-lists","entities.resources.views/toggle-filter","active-resource-list-filters","active-filter-list-key","filter-key","cljs.core.swap_BANG_","cljs.core.update_in","cljs.core/not","entities.resources.views/toggle-filter-button","resource-type-filters","active-filter-lists","filter-on?","cljs.core.get_in","js/shadow.js.shim.module$react_native.Pressable","organisms.config/palette","js/shadow.js.shim.module$$expo$vector_icons.FontAwesome5","entities.resources.views/resource-list-simple-filters","js/shadow.js.shim.module$react_native.View","cljs.core.doall","p1__39751#","cljs.core.map","p1__39752#","p1__39753#","p1__39754#","p1__39755#","entities.resources.views/creature-resource-column-headers","p1__39756#","p1__39757#","p1__39758#","entities.resources.views/resource-column-headers","entities.resources.views/sort-as-sections","grouped-resources","sorted-sections","section-title","p1__39759#","cljs.core.remove","cljs.core/empty?","cljs.core.conj","entities.resources.views/sort-sections","resource-type","temp__5804__auto__","resource-data","var_args","G__39762","entities.resources.views/sort-resources-by-type","js/Error","entities.resources.views.sort_resources_by_type","grouping-logic","cljs.core/group-by","cljs.core/nil?","p1__39760#","cljs.core.mapv","entities.resources.views/sort-creature-resources-by-type","creature-resources","p1__39763#","entities.resources.views/creature-resource-sort-manager","entities.resources.views/resource-sort-manager","entities.resources.views/resource-modal","conn","id","resource","entities.resources.data.interface/get-resource","G__39764","G__39765","organisms.library/default-text","G__39766","G__39767","G__39768","G__39769","G__39770","resource-actions","G__39771","G__39772","entities.resources.data.interface/get-resource-actions","entities.actions.views/action-list","entities.resources.views/new-resource-type-selection","entities.resources.views/resource-type-select-button","type-id","type-title","cljs.core._EQ_","organisms.library/text-input-map","p1__39773#","cljs.core.assoc","entities.resources.views/resource-type-select","p__39776","map__39777","cljs.core/--destructure-map","entities.resources.views/resource-property-select-button","title","selected?","p1__39774#","cljs.core/some","new-property-vals","p1__39775#","input-map","entities.resources.views/resource-property-select","property-id","resource-properties","entities.resources.data.interface/get-all-resource-properties","G__39778","cljs.core.repeat","entities.resources.views/new-resource-modal","js/shadow.js.shim.module$react_native.ScrollView","G__39779","G__39780","organisms.library/default-text-input","G__39781","G__39782","G__39783","G__39784","G__39785","G__39786","G__39787","G__39788","G__39789","G__39790","organisms.library/button","G__39791","G__39792","entities.resources.data.interface/create-resource","cljs.core.into","p__39793","vec__39794","cljs.core.nth","_","v","cljs.core.println","cljs.core/reset!","p__39797","map__39798","entities.resources.views/creature-resource-modal","type","description","quality-title","quality-value","power-title","power-value","quantity","G__39799","G__39800","G__39801","G__39802","G__39803","G__39804","G__39805","or__5045__auto__","entities.resources.views/resource-quantity-column","creature-resource-id","flex-size","dec-quantity","entities.resources.data.interface/update-creature-resource-quantity","cljs.core/dec","inc-quantity","cljs.core/inc","organisms.library/decrementor-and-incrementor","entities.resources.views/creature-resource-quantity-column","entities.resources.data.interface/get-quantity-from-creature-resource","entities.resources.views/resource-row-component","flex-vals","p__39806","map__39807","organisms.library/modal-content","G__39808","G__39809","G__39810","G__39811","G__39812","G__39813","entities.resources.views/create-new-resource","entities.resources.views/resource-list-sfs-component","list-key","entities.resources.views/add-resource-row-component","creature-id","p__39814","map__39815","entities.resources.data.interface/add-creature-resource","G__39816","G__39817","G__39818","G__39819","G__39820","G__39821","entities.resources.views/creature-resource-row-component","p__39822","map__39823","map__39824","stuff","G__39825","G__39826","G__39827","G__39828","G__39829","G__39830","entities.resources.views/get-disjunctive-filters","active-filter-list","cljs.core/not-empty","cljs.core.concat","cljs.core/vec","p__39831","vec__39832","filter-value","entities.resources.views/get-default-resource-where-vector","entities.resources.views/get-creature-resource-where-vector","entities.resources.views/resource-search-filter-query","active-resource-filter-lists","p1__39835#","cljs.core/last","creature-resources?","where-vector","resource-ids","cljs.core/first","G__39836","G__39837","datascript.core/q","G__39838","G__39839","G__39840","datascript.core/pull-many","search-applied-resources","p__39841","map__39842","entities.resources.views/resource-list","search-filter-query","item-format-fn","new-item-fn","sort-manager","sfs-component","quantity?","headers","G__39843","G__39844","organisms.library/search-filter-sort-list","entities.resources.views/add-resource-to-creature-list","entities.resources.views/creature-resource-list","entities.resources.views/resources-main-page","organisms.config/screen-width","entities.resources.views/resources","props","organisms.library/view-frame"],"sourcesContent":["(ns entities.resources.views\r\n  (:require [clojure.string :as str]\r\n            [reagent.core :as r]\r\n            [\"react-native\" :as rn]\r\n            [datascript.core :as ds]\r\n            [\"@expo/vector-icons\" :refer [FontAwesome5]]\r\n            [entities.campaigns.data.interface :as campaign-data]\r\n            [entities.resources.data.interface :as resource-data]\r\n            [entities.actions.views :refer [action-list]]\r\n            [organisms.config :refer [palette screen-width]]\r\n            [organisms.library :as components]))\r\n\r\n(defn resource-flex-vals\r\n  [creature?]\r\n  (if creature?\r\n    [3 1 1 2]\r\n    [3 1 1]))\r\n\r\n;;;;;;;;;;;;;;;;\r\n;; Search fns ;;\r\n;;;;;;;;;;;;;;;;\r\n\r\n(def resource-search-text (r/atom {\"resources\"          (r/atom \"\")\r\n                                   \"creature-resources\" (r/atom \"\")\r\n                                   \"add-resources\"      (r/atom \"\")}))\r\n\r\n(defn resource-list-search-bar\r\n  [search-text-map-key]\r\n  (components/search-bar resource-search-text search-text-map-key))\r\n\r\n(defn resource-search-fn\r\n  [resources component-key]\r\n  (filter #(str/includes?\r\n            (str/lower-case (apply str (vals %)))\r\n            (str/lower-case\r\n             (if-let [search-text-atom (get @resource-search-text component-key)]\r\n               (deref search-text-atom)\r\n               \"\")))\r\n          resources))\r\n\r\n;;;;;;;;;;;;;;;;\r\n;; Filter fns ;;\r\n;;;;;;;;;;;;;;;;\r\n\r\n(def resource-type-filters-list\r\n  {\"Equipment\"   {:icon   :fist-raised\r\n                  :filter ['?resource-id :resource/type \"Equipment\"]}\r\n   \"Trait\"       {:icon   :eye\r\n                  :filter ['?resource-id :resource/type \"Trait\"]}\r\n   \"Expertise\"   {:icon   :brain\r\n                  :filter ['?resource-id :resource/type \"Expertise\"]}\r\n   \"Affiliation\" {:icon   :user-friends\r\n                  :filter ['?resource-id :resource/type \"Affiliation\"]}\r\n   \"Item\"        {:icon   :suitcase\r\n                  :filter ['?resource-id :resource/type \"Item\"]}})\r\n\r\n(def active-resource-filter-lists\r\n  (r/atom {\"resources\"          {}\r\n           \"creature-resources\" {}\r\n           \"add-resources\"      {}}))\r\n\r\n(defn toggle-filter\r\n  [active-resource-list-filters active-filter-list-key filter-key]\r\n  (swap! active-resource-list-filters\r\n         (fn [active-resource-list-filters]\r\n           (update-in active-resource-list-filters\r\n                      [active-filter-list-key filter-key]\r\n                      not))))\r\n\r\n(defn toggle-filter-button\r\n  [resource-type-filters active-filter-lists active-filter-list-key filter-key]\r\n  (let [filter-on? (get-in @active-filter-lists [active-filter-list-key filter-key])]\r\n    [:> rn/Pressable {:style    {:background-color (when filter-on? (:surface-700 @palette))\r\n                                 :align-items      :center :width \"20%\"}\r\n                      :on-press #(toggle-filter active-filter-lists\r\n                                                active-filter-list-key\r\n                                                filter-key)}\r\n     [:> FontAwesome5 {:name  (get-in resource-type-filters [filter-key :icon])\r\n                       :color (if filter-on? (:surface-100 @palette) (:surface-700 @palette))\r\n                       :size  20}]]))\r\n\r\n\r\n(defn resource-list-simple-filters\r\n  [active-filter-list-key]\r\n  [:> rn/View {:style {:flex-direction :row}}\r\n   (doall\r\n    (map #(toggle-filter-button resource-type-filters-list\r\n                                active-resource-filter-lists\r\n                                active-filter-list-key\r\n                                %)\r\n         [\"Equipment\" \"Trait\" \"Expertise\" \"Affiliation\" \"Item\"]))])\r\n\r\n;;;;;;;;;;;;;;\r\n;; Sort fns ;;\r\n;;;;;;;;;;;;;;\r\n\r\n(def creature-resource-column-headers\r\n  {\"Title\"    {:header  \"Title\"\r\n               :sort-fn #(get-in % [:creature-resource/resource :title])}\r\n   \"Quality\"  {:header  \"Quality\"\r\n               :sort-fn #(get-in % [:creature-resource/resource :resource/quality-value])}\r\n   \"Power\"    {:header  \"Power\"\r\n               :sort-fn #(get-in % [:creature-resource/resource :resource/power-value])}\r\n   \"Quantity\" {:header  \"Quantity\"\r\n               :sort-fn #(get % :creature-resource/quantity)}})\r\n\r\n(def resource-column-headers\r\n  {\"Title\"   {:header  \"Title\"\r\n              :sort-fn #(get % :title)}\r\n   \"Quality\" {:header  \"Quality\"\r\n              :sort-fn #(get % :resource/quality-value)}\r\n   \"Power\"   {:header  \"Power\"\r\n              :sort-fn #(get % :resource/power-value)}})\r\n\r\n(defn sort-as-sections\r\n  [grouped-resources]\r\n  (fn\r\n    [sorted-sections section-title]\r\n    (remove #(empty? (:data %))\r\n            (conj sorted-sections\r\n                  {:title section-title\r\n                   :data (get grouped-resources section-title)}))))\r\n\r\n(defn sort-sections\r\n  [grouped-resources resource-type]\r\n  (when-let [resource-data (get grouped-resources resource-type)]\r\n    {:title resource-type :data resource-data}))\r\n\r\n(defn sort-resources-by-type\r\n  ([resources]\r\n   (sort-resources-by-type resources :resource/type))\r\n  ([resources grouping-logic]\r\n   (let [grouped-resources (group-by grouping-logic resources)]\r\n     (remove nil?\r\n             (mapv #(sort-sections grouped-resources %)\r\n                   [\"Equipment\" \"Trait\" \"Expertise\" \"Affiliation\" \"Item\"])))))\r\n\r\n(defn sort-creature-resources-by-type\r\n  [creature-resources]\r\n  (sort-resources-by-type creature-resources\r\n                          #(get-in % [:creature-resource/resource :resource/type])))\r\n\r\n(def creature-resource-sort-manager\r\n  (r/atom {\"Title\" {:asc? true :order 1}}))\r\n\r\n(def resource-sort-manager\r\n  (r/atom {\"Title\" {:asc? true :order 1}}))\r\n\r\n;;;;;;;;;;;;\r\n;; Modals ;;\r\n;;;;;;;;;;;;\r\n\r\n(defn resource-modal\r\n  [conn id]\r\n  (let [resource (resource-data/get-resource conn id)]\r\n    [:> rn/View {:style {:height \"100%\"}}\r\n     (components/default-text (:title resource) {:font-size 24})\r\n     (components/default-text (str \"(\" (:resource/type resource) \")\") {:font-size 12})\r\n     (components/default-text (:resource/description resource))\r\n     (components/default-text (str (:resource/quality-title resource) \": \" (:resource/quality-value resource)))\r\n     (components/default-text (str (:resource/power-title resource) \": \" (:resource/power-value resource)))\r\n     (when-let [resource-actions (resource-data/get-resource-actions conn (:db/id resource))]\r\n       (action-list conn {:id (:db/id resource)\r\n                          :actions resource-actions\r\n                          :header \"Actions\"\r\n                          :collapsed? false\r\n                          :non-sorted? true}))]))\r\n\r\n(def new-resource-type-selection\r\n  (r/atom \"Equipment\"))\r\n\r\n(defn resource-type-select-button\r\n  [type-id type-title]\r\n  [:> rn/Pressable\r\n   {:style {:background-color (if (= type-title (get @components/text-input-map type-id)) :green :red)}\r\n    :on-press (fn []\r\n                (swap! components/text-input-map #(assoc % type-id type-title)))}\r\n   (components/default-text type-title)])\r\n\r\n(defn resource-type-select\r\n  [type-id]\r\n  [:> rn/View {:style {:flex-direction :row}}\r\n   (resource-type-select-button type-id \"Equipment\")\r\n   (resource-type-select-button type-id \"Traits\")\r\n   (resource-type-select-button type-id \"Expertise\")\r\n   (resource-type-select-button type-id \"Connections\")\r\n   (resource-type-select-button type-id \"Items\")])\r\n\r\n(defn resource-property-select-button\r\n  [type-id {:keys [resource-property/title db/id]}]\r\n  (let [selected? (some #(= id %) (get @components/text-input-map type-id))]\r\n    [:> rn/Pressable\r\n     {:style {:background-color (if selected? :green :red)}\r\n      :on-press (fn []\r\n                  (let [new-property-vals (if selected?\r\n                                            (filter #(not (= % id))\r\n                                                    (get @components/text-input-map type-id))\r\n                                            (conj (get @components/text-input-map type-id) id))]\r\n                    (swap! components/text-input-map (fn [input-map]\r\n                                                       (assoc input-map type-id new-property-vals)))))}\r\n     (components/default-text title)]))\r\n\r\n(defn resource-property-select\r\n  [conn property-id]\r\n  (let [resource-properties (resource-data/get-all-resource-properties conn)]\r\n    [:> rn/View\r\n     (components/default-text (components/default-text \"Properties:\"))\r\n     [:> rn/View {:style {:flex-direction :row}}\r\n      (map resource-property-select-button (repeat property-id) resource-properties)]]))\r\n\r\n(defn new-resource-modal\r\n  [conn]\r\n  [:> rn/ScrollView {:style {:padding 5}}\r\n   (components/default-text-input (components/default-text \"Title:\") \"new-resource-title\")\r\n   (resource-type-select \"new-resource-type\")\r\n   (resource-property-select conn \"new-resource-properties\")\r\n   (components/default-text-input (components/default-text \"Actions:\") \"new-resource-actions\")\r\n   (components/default-text-input (components/default-text \"Quality:\") \"new-resource-quality\")\r\n   (components/default-text-input (components/default-text \"Power:\") \"new-resource-power\")\r\n   (components/default-text-input (components/default-text \"Description:\") \"new-resource-description\")\r\n   (components/button\r\n    {:on-press (fn []\r\n                 (resource-data/create-resource\r\n                  conn\r\n                  [(into {}\r\n                         (remove\r\n                          (fn [[_ v]] (println @components/text-input-map) (or (nil? v) (= \"\" v)))\r\n                          {:title                  (get @components/text-input-map \"new-resource-title\")\r\n                           :entity-type            \"resource\"\r\n                           :resource/type          (get @components/text-input-map \"new-resource-type\")\r\n                           :resource/properties    (get @components/text-input-map \"new-resource-properties\")\r\n                           ;; :resource/actions       (get @components/text-input-map \"new-resource-actions\")\r\n                           :resource/quality-title \"Quality\"\r\n                           :resource/quality-value (get @components/text-input-map \"new-resource-quality\")\r\n                           :resource/power-title   \"Power\"\r\n                           :resource/power-value   (get @components/text-input-map \"new-resource-power\")\r\n                           :resource/flavor-text   (get @components/text-input-map \"new-resource-description\")}))])\r\n                 (reset! components/text-input-map {}))}\r\n    \"Save!\")])\r\n\r\n(defn creature-resource-modal\r\n  [conn\r\n   {:keys [id\r\n           title type description\r\n           quality-title quality-value\r\n           power-title power-value]}\r\n   quantity]\r\n  [:> rn/View {:style {:height \"100%\"}}\r\n   (components/default-text title {:font-size 24})\r\n   (components/default-text (str \"(\" type \")\") {:font-size 12})\r\n   (components/default-text description)\r\n   (components/default-text (str quality-title \": \" quality-value))\r\n   (components/default-text (str power-title \": \" power-value))\r\n   (when quantity (components/default-text (str \"Quantity: \" (or quantity 0))))\r\n   (action-list conn {:id id\r\n                      :actions (resource-data/get-resource-actions conn id)\r\n                      :header \"Actions\"\r\n                      :collapsed? false})])\r\n\r\n\r\n;;;;;;;;;;;\r\n;; Lists ;;\r\n;;;;;;;;;;;\r\n\r\n(defn resource-quantity-column\r\n  [conn creature-resource-id quantity flex-size]\r\n  (let [dec-quantity (fn [] (resource-data/update-creature-resource-quantity conn creature-resource-id dec))\r\n        inc-quantity (fn [] (resource-data/update-creature-resource-quantity conn creature-resource-id inc))]\r\n    [:> rn/View {:style {:flex flex-size}}\r\n     (components/decrementor-and-incrementor nil quantity dec-quantity inc-quantity)]))\r\n\r\n(defn creature-resource-quantity-column\r\n  [conn creature-resource-id flex-size]\r\n  (let [quantity (resource-data/get-quantity-from-creature-resource conn creature-resource-id)\r\n        dec-quantity (fn [] (resource-data/update-creature-resource-quantity conn creature-resource-id dec))\r\n        inc-quantity (fn [] (resource-data/update-creature-resource-quantity conn creature-resource-id inc))]\r\n    [:> rn/View {:style {:flex flex-size}}\r\n     (components/decrementor-and-incrementor nil quantity dec-quantity inc-quantity)]))\r\n\r\n(defn resource-row-component\r\n  [conn flex-vals]\r\n  (fn [{:keys [id title quality-value power-value]}]\r\n     [:> rn/Pressable\r\n      {:style    {:flex-direction :row :padding-top 10 :padding-bottom 10 :width \"100%\"}\r\n       :on-press (fn []\r\n                   (reset! components/modal-content\r\n                           {:display? true\r\n                            :fn       resource-modal\r\n                            :args     [conn id]}))}\r\n      (components/default-text title {:flex (nth flex-vals 0) :font-size 16})\r\n      (components/default-text quality-value {:flex (nth flex-vals 1) :font-size 16 :text-align :center})\r\n      (components/default-text power-value {:flex (nth flex-vals 2) :font-size 16 :text-align :center})]))\r\n\r\n(defn create-new-resource\r\n  [conn]\r\n  (reset! components/modal-content\r\n          {:display? true :fn new-resource-modal :args [conn] :close-fn #(reset! components/text-input-map {})}))\r\n\r\n(defn resource-list-sfs-component\r\n  [list-key]\r\n  [:> rn/View {:style {:flex \"auto\"}}\r\n   (resource-list-search-bar list-key)\r\n   (resource-list-simple-filters list-key)])\r\n\r\n(defn add-resource-row-component\r\n  [conn creature-id]\r\n  (fn [{:keys [title quality-value power-value id] :as resource}]\r\n    (let [flex-vals (resource-flex-vals true)]\r\n      [:> rn/Pressable\r\n       {:style    {:flex-direction :row :padding-top 10 :padding-bottom 10 :width \"100%\"}\r\n        :on-press (fn []\r\n                    (resource-data/add-creature-resource conn creature-id id))}\r\n       (components/default-text title {:flex (nth flex-vals 0) :font-size 16})\r\n       (components/default-text quality-value {:flex (nth flex-vals 1) :font-size 16 :text-align :center})\r\n       (components/default-text power-value {:flex (nth flex-vals 2) :font-size 16 :text-align :center})])))\r\n\r\n(defn creature-resource-row-component\r\n  [conn]\r\n  (let [flex-vals (resource-flex-vals true)]\r\n    (fn [{id                                                     :id\r\n          {:keys [title quality-value power-value] :as resource} :resource\r\n          quantity                                               :quantity\r\n          :as stuff}]\r\n      [:> rn/Pressable\r\n       {:style    {:flex-direction :row :padding-top 10 :padding-bottom 10 :width \"100%\"}\r\n        :on-press (fn []\r\n                    (reset! components/modal-content\r\n                            {:display? true\r\n                             :fn       creature-resource-modal\r\n                             :args     [conn resource quantity]}))}\r\n       (components/default-text title {:flex (nth flex-vals 0) :font-size 16})\r\n       (components/default-text quality-value {:flex (nth flex-vals 1) :font-size 16 :text-align :center})\r\n       (components/default-text power-value {:flex (nth flex-vals 2) :font-size 16 :text-align :center})\r\n       (creature-resource-quantity-column conn id (nth flex-vals 3))])))\r\n\r\n(defn get-disjunctive-filters\r\n  [active-filter-list]\r\n  (when (not-empty active-filter-list)\r\n    [(concat ['or]\r\n             (vec (map (fn [[filter-key filter-value]]\r\n                         (when filter-value (get-in resource-type-filters-list [filter-key :filter])))\r\n                       active-filter-list)))]))\r\n\r\n(defn get-default-resource-where-vector\r\n  [active-filter-list]\r\n  (vec (concat [['?resource-id :entity-type \"resource\"]] (get-disjunctive-filters active-filter-list))))\r\n\r\n(defn get-creature-resource-where-vector\r\n  [active-filter-list]\r\n  (vec (concat [['?eid :entity-type \"creature-resource\"]]\r\n               [['?eid :creature-resource/resource '?resource-id]]\r\n               (get-disjunctive-filters active-filter-list))))\r\n\r\n(defn resource-search-filter-query\r\n  [conn active-resource-filter-lists list-key]\r\n  (let [active-filter-list (filter #(last %) (get @active-resource-filter-lists list-key))\r\n        creature-resources? (= list-key \"creature-resources\")\r\n        where-vector (if creature-resources? \r\n                       (get-creature-resource-where-vector active-filter-list)\r\n                       (get-default-resource-where-vector active-filter-list))\r\n        resource-ids (map first (ds/q {':find (if creature-resources? '[?eid] '[?resource-id])\r\n                                       ':where where-vector}\r\n                                      @conn))\r\n        resources (ds/pull-many @conn '[*] resource-ids)\r\n        search-applied-resources (resource-search-fn resources list-key)]\r\n    (if creature-resources?\r\n      (sort-creature-resources-by-type search-applied-resources)\r\n      (sort-resources-by-type search-applied-resources))))\r\n\r\n(defn resource-list\r\n  [conn {:keys [search-filter-query item-format-fn new-item-fn\r\n                sort-manager sfs-component\r\n                quantity? list-key]}]\r\n  (let [flex-vals (resource-flex-vals quantity?)\r\n        headers   (if quantity?\r\n                    creature-resource-column-headers\r\n                    resource-column-headers)]\r\n    (components/search-filter-sort-list\r\n     {:list-header      \"Resources\"\r\n      :column-flex-vals flex-vals\r\n      :column-headers   headers\r\n      :items            (or search-filter-query\r\n                            (resource-search-filter-query conn\r\n                                                          active-resource-filter-lists\r\n                                                          (or list-key \"resources\")))\r\n      :item-format-fn   (or item-format-fn\r\n                            (resource-row-component conn flex-vals))\r\n      :new-item-fn      (or new-item-fn\r\n                            #(create-new-resource conn))\r\n      :sort-manager     sort-manager\r\n      :search-filter-sort-component\r\n      (or sfs-component\r\n          (resource-list-sfs-component \"resources\"))}\r\n     1)))\r\n\r\n(defn add-resource-to-creature-list\r\n  [conn creature-id]\r\n  (let [list-key \"add-resources\"]\r\n    (resource-list\r\n     conn\r\n     {:item-format-fn (add-resource-row-component conn creature-id)\r\n      :new-item-fn    #(create-new-resource conn)\r\n      :sfs-component  (resource-list-sfs-component list-key)\r\n      :sort-manager   creature-resource-sort-manager\r\n      :quantity?      false\r\n      :list-key       list-key})))\r\n\r\n(defn creature-resource-list\r\n  [conn creature-id]\r\n  (let [list-key \"creature-resources\"]\r\n    (resource-list \r\n     conn\r\n     {:item-format-fn (creature-resource-row-component conn)\r\n      :new-item-fn    #(reset! components/modal-content\r\n                               {:display? true\r\n                                :fn       add-resource-to-creature-list\r\n                                :args     [conn creature-id]})\r\n      :sfs-component  (resource-list-sfs-component list-key)\r\n      :sort-manager   creature-resource-sort-manager\r\n      :quantity?      true\r\n      :list-key       list-key})))\r\n\r\n(defn resources-main-page [conn]\r\n  (let [list-key \"resources\"\r\n        flex-vals (resource-flex-vals false)]\r\n    [:> rn/View {:style {:flex :1 :width (screen-width) :align-items :center}}\r\n     (resource-list conn\r\n                    {:item-format-fn (resource-row-component conn flex-vals)\r\n                     :sfs-component  (resource-list-sfs-component list-key)\r\n                     :sort-manager   resource-sort-manager\r\n                     :list-key       list-key})]))\r\n\r\n(defn resources [conn ^js props]\r\n  (components/view-frame conn (resources-main-page conn) \"resources-page\"))\r\n"]}